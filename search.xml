<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>github slow</title>
      <link href="/2023/02/15/github-slow/"/>
      <url>/2023/02/15/github-slow/</url>
      
        <content type="html"><![CDATA[<p>GitHub访问慢或者无法访问一般是由以下问题引起的：</p><ul><li>本地网络访问慢，科学上网速度很快</li><li>本地网络无法访问（响应时间过长导致无法访问）</li><li>由于github的加速分发CDN域名assets-cdn.github.com遭到DNS污染，无法访问</li></ul><h1 id="1-修改本地hosts映射"><a href="#1-修改本地hosts映射" class="headerlink" title="1. 修改本地hosts映射"></a>1. 修改本地hosts映射</h1><blockquote><p>域名解析直接指向GitHub的IP地址，以此来绕过DNS解析</p></blockquote><h2 id="1-1-查看最新GitHub-的最新ip地址"><a href="#1-1-查看最新GitHub-的最新ip地址" class="headerlink" title="1.1 查看最新GitHub 的最新ip地址"></a>1.1 查看最新GitHub 的最新ip地址</h2><p>在 ip地址查询 网站中查询GitHub相关的网站对应的最新IP地址</p><ul><li>github.com</li><li>github.global.ssl.fastly.net</li><li>assets-cdn.github.com</li><li>codeload.github.com</li></ul><p>在当前网站中查询指定网站ip地址还可以使用另外方法:<br>①直接将网站作为参数进行请求，省略点击查询的步骤：</p><ul><li>websites.ipaddress.com/github.glob…</li><li>websites.ipaddress.com/github.com</li><li>websites.ipaddress.com/assets-cdn.…</li><li>websites.ipaddress.com/codeload.gi…</li></ul><p>②将ip查询网站拼接在之后进行查询</p><ul><li>github.global.ssl.fastly.net.ipaddress.com/</li><li>github.com.ipaddress.com/</li><li>assets-cdn.github.com.ipaddress.com/</li><li>codeload.github.com.ipaddress.com/</li></ul><h2 id="1-2-本地hosts文件映射ip地址"><a href="#1-2-本地hosts文件映射ip地址" class="headerlink" title="1.2 本地hosts文件映射ip地址"></a>1.2 本地hosts文件映射ip地址</h2><p>找到对应的IP地址后，将IP地址与网站地址进行对应，并将对应关系写入本地hosts文件中。<br>在windows系统中的c:/Windows/System32/drivers/etc 下找到hosts文件，编辑打开，将四个网站的IP地址和网站地址对应写入进入，作为DNS的映射。<br>hosts文件直接编辑修改时可能没有权限，可以通过以下方法完成修改：</p><ol><li>修改当前文件权限，右键hosts文件 -&gt; 属性 -&gt; 安全 -&gt; 编辑 -&gt; Users -&gt; Users的权限后加入写权限</li><li>将当前文件复制到别的盘中，修改文件后复制回来覆盖原来文件<br>```<br>#github dns映射 格式如：  [ip]: [domainName]</li><li>232.69.194 github.global.ssl.Fastly.net</li><li>82.114.4 GitHub.com</li><li>199.108.153 assets-cdn.Github.com</li><li>82.114.9 codeload.Github.com<pre><code></code></pre></li></ol><h2 id="1-3-刷新DNS缓存来访问新的映射"><a href="#1-3-刷新DNS缓存来访问新的映射" class="headerlink" title="1.3 刷新DNS缓存来访问新的映射"></a>1.3 刷新DNS缓存来访问新的映射</h2><p>hosts文件内容更新成功后，还需要刷新windows系统的DNS才可以生效。<br>使用 win+R ，打开cmd命令行，输入 <code>ipconfig/flushdns</code> 刷新DNS缓存即可。</p><p>刷新完成后，再次打开github网站时速度会明显提升，需要注意的是以上github网站的ip经常发生变化，如果访问再次变慢可以重新更新映射信息。</p><h1 id="2-一键更新"><a href="#2-一键更新" class="headerlink" title="2. 一键更新"></a>2. 一键更新</h1><p>手动更新本地hosts文件的方式比较繁琐，我们可以编写程序来代替手动操作，实现需要时hosts文件内容的一键更新。<br>推荐一个github开源项目：<a href="https://github.com/isevenluo/github-hosts" target="_blank" rel="noopener">更新hosts</a> ，<a href="https://gitee.com/isevenluo/github-hosts" target="_blank" rel="noopener">国内git地址</a>，作者会每日提供最新的相关ip地址映射信息，我们可以直接复制使用或者使用其中的程序进行一键更新操作。<br>作为一个coder，我们也可以自己去实现一个脚本程序。</p><p>作者：东方甲乙木土<br>链接：<a href="https://juejin.cn/post/7019683061977579557" target="_blank" rel="noopener">https://juejin.cn/post/7019683061977579557</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试常见问题与相关答案</title>
      <link href="/2021/01/14/interview/"/>
      <url>/2021/01/14/interview/</url>
      
        <content type="html"><![CDATA[<p><a href="https://xianyunyh.gitbooks.io/php-interview/content/" target="_blank" rel="noopener">PHP面试准备的资料</a></p><p><a href="https://segmentfault.com/a/1190000012092552" target="_blank" rel="noopener">细说浏览器输入URL后发生了什么</a></p><p><a href="https://alexzzl.github.io/2020/07/08/session-cookie/">简述 cookie 和 session的区别及各自的工作机制，存储位置等，简述 cookie 的优缺点。</a></p><p><a href="https://www.cnblogs.com/eoiioe/archive/2008/11/30/1344283.html" target="_blank" rel="noopener">php session 数据保存在哪里?</a></p><p>Session 文件什么样的</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'view'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Alex"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*array(2) {  ["view"]=>  int(1)  ["name"]=>  string(4) "Alex"}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Bash"><code class="language-Bash">➜  ~ sudo ls /var/lib/php/sessions                                 sess_6bjte47jooqn8aoj3tbpuiufc7  sess_slchsjrrp843johcnenjl69lopsess_kpievppouhsvh1fos7j66iie0k➜  ~ sudo cat /var/lib/php/sessions/sess_kpievppouhsvh1fos7j66iie0kview|i:1;%     ➜  ~ sudo cat /var/lib/php/sessions/sess_6bjte47jooqn8aoj3tbpuiufc7view|i:1;name|s:4:"Alex";%      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/whatday/article/details/104963945" target="_blank" rel="noopener">linux shell 替换字符串的几种方法，变量替换${}，sed，awk</a></p><pre class="line-numbers language-Bash"><code class="language-Bash">➜  ~ a='zhaoli_zhang@qq.com'➜  ~ echo  ${a/qq/baidu}    zhaoli_zhang@baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://www.w3school.com.cn/php/func_string_str_replace.asp" target="_blank" rel="noopener">PHP str_replace() 函数</a></p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">,</span> <span class="token string">'Shangehai'</span><span class="token punctuation">,</span> <span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://www.runoob.com/php/php-preg_replace.html" target="_blank" rel="noopener">preg_replace() 函数</a></p><p><a href="https://www.cnblogs.com/mfryf/p/5013937.html" target="_blank" rel="noopener">PHP 字符串替换 substr_replace 与 str_replace 函数</a></p><p><a href="https://www.php.net/manual/zh/function.explode.php" target="_blank" rel="noopener">explode — 使用一个字符串分割另一个字符串</a></p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">explode</span> <span class="token punctuation">(</span> string <span class="token variable">$delimiter</span> <span class="token punctuation">,</span> string <span class="token variable">$string</span> <span class="token punctuation">,</span> int <span class="token variable">$limit</span> <span class="token operator">=</span> <span class="token operator">?</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">array</span><span class="token variable">$pizza</span>  <span class="token operator">=</span> <span class="token string">"piece1 piece2 piece3 piece4 piece5 piece6"</span><span class="token punctuation">;</span><span class="token variable">$pieces</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token variable">$pizza</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$pieces</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// piece1</span><span class="token keyword">echo</span> <span class="token variable">$pieces</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// piece2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.php.net/manual/zh/function.implode.php" target="_blank" rel="noopener">implode — 将一个一维数组的值转化为字符串</a></p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">implode</span> <span class="token punctuation">(</span> string <span class="token variable">$glue</span> <span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$pieces</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> string<span class="token function">implode</span> <span class="token punctuation">(</span> <span class="token keyword">array</span> <span class="token variable">$pieces</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> string<span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'lastname'</span><span class="token punctuation">,</span> <span class="token string">'email'</span><span class="token punctuation">,</span> <span class="token string">'phone'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$comma_separated</span> <span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$comma_separated</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// lastname,email,phone</span><span class="token comment" spellcheck="true">// Empty string when using an empty array:</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string(0) ""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://alexzzl.github.io/2020/07/08/http/">HTTP/1.1中，状态码 200 301 304 403 404 500 的含义。</a></p><ul><li>200(OK) : 从状态码发出的请求被服务器正常处理。</li><li>204(No Content) : 服务器接收的请求已成功处理，但在返回的响应报文中不含实体的主体部分【即没有内容】。</li><li>206(Partial Content) : 部分的内容（如：客户端进行了范围请求，但是服务器成功执行了这部分的干请求）。</li><li>301(Moved Permanently) : 跳转，代表永久性重定向（请求的资源已被分配了新的URI，以后已使用资源，现在设置了URI）。</li><li>302(Found) : 临时性重定向（请求的资源已经分配了新的URI，希望用户本次能够使用新的URI来进行访问）。</li><li>303(See Other) : 由于请求对应的资源存在的另一个URI（因使用get方法，定向获取请求的资源）。</li><li>304(Not Modified) : 客户端发送附带条件的请求时，服务器端允许请求访问资源，但因发生请求未满足条件的情况后，直接返回了 304。</li><li>307(Temporary Redirect) : 临时重定向【该状态码与302有着相同的含义】。</li><li>400(Bad Request) : 请求报文中存在语法错误（当错误方式时，需修改请求的内容后，再次发送请求）。</li><li>401(Unauthorized) : 发送的请求需要有通过HTTP认证的认证信息。</li><li>403(Forbidden) : 对请求资源的访问被服务器拒绝了。</li><li>404(Not Found) : 服务器上无法找到请求的资源。</li><li>500(Internal Server Error) : 服务器端在执行请求时发生了错误。</li><li>503(Service Unavailable) : 服务器暂时处于超负载或者是正在进行停机维护，现在无法处理请求。</li></ul><p><a href="https://www.cnblogs.com/heyongzhen/p/13863980.html" target="_blank" rel="noopener">Laravel8和之前Laravel版本的区别</a></p><p><a href="https://learnku.com/articles/52852" target="_blank" rel="noopener">干货预警，一篇文章带你彻底搞懂 Laravel 框架的运行原理！！！</a></p><p><a href="https://learnku.com/laravel/t/3522/php-complete-combat-23-design-patterns" target="_blank" rel="noopener">PHP 完整实战 23 种设计模式</a></p><p><a href="https://laravelacademy.org/books/php-design-pattern" target="_blank" rel="noopener">PHP 设计模式系列</a></p><p><a href="https://segmentfault.com/a/1190000014449841" target="_blank" rel="noopener">走过的，路过的，快来看看laravel设计模式好文章的汇总！</a></p><p><a href="https://www.kancloud.cn/jdxia/booknote/581230" target="_blank" rel="noopener">laravel框架中的设计模式-IOC模式</a></p><p><a href="https://blog.51cto.com/quantum/1179124" target="_blank" rel="noopener">IoC模式（控制反转、依赖注入）</a></p><p><a href="https://learnku.com/php/t/1002/deep-composer-autoload" target="_blank" rel="noopener">深入 Composer autoload</a></p><p><a href="https://www.kancloud.cn/jdxia/booknote/527018" target="_blank" rel="noopener">book note</a></p><p><a href="https://www.easyswoole.com/Video/Basic/php-fpmProcessModel.html" target="_blank" rel="noopener">php-fpm进程模型</a></p><p><a href="https://learnku.com/php/t/1002/deep-composer-autoload" target="_blank" rel="noopener">深入 Composer autoload</a></p><p><a href="https://www.kancloud.cn/jdxia/booknote/527018" target="_blank" rel="noopener">book note</a></p><p><a href="https://www.easyswoole.com/Video/Basic/php-fpmProcessModel.html" target="_blank" rel="noopener">php-fpm进程模型</a></p><p><a href="https://blog.csdn.net/soonfly/article/details/53008891" target="_blank" rel="noopener">PSR-4与PSR-0的区别</a></p><p><a href="https://learnku.com/docs/psr" target="_blank" rel="noopener">PHP PSR 标准规范</a></p><p><a href="https://learnku.com/docs/elasticsearch-php/6.0" target="_blank" rel="noopener">Elasticsearch-PHP 中文文档</a></p><p><a href="https://learnku.com/docs/php-internals/php7" target="_blank" rel="noopener">PHP 内核与原生扩展开发 php7</a></p><p><a href="https://www.zhihu.com/question/20596402" target="_blank" rel="noopener">Mysql 中 MyISAM 和 InnoDB 的区别有哪些？</a></p><p><a href="https://juejin.cn/post/6917477406483677191" target="_blank" rel="noopener">MySQL的事务和锁</a></p><p><a href="https://www.zhihu.com/question/40560123" target="_blank" rel="noopener">内存泄漏和内存溢出有啥区别？</a></p><p><a href="https://www.cnblogs.com/JsonM/articles/7325018.html" target="_blank" rel="noopener">10.swoole基础-常驻内存以及如何避免内存泄漏</a></p><p><a href="https://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="noopener">websocket</a></p><p><a href="http://blog.leanote.com/post/weibo-007/Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8" target="_blank" rel="noopener">Socket网络编程入门</a></p><p><a href="https://github.com/doocs/advanced-java/blob/main/docs/high-concurrency/mysql-read-write-separation.md" target="_blank" rel="noopener">MySQL 主从复制</a></p><p><a href="https://github.com/doocs/advanced-java/blob/main/docs/high-concurrency/redis-single-thread-model.md" target="_blank" rel="noopener">Redis 和 Memcached 有什么区别？</a></p><p><a href="https://phptherightway.com/" target="_blank" rel="noopener">PHP The Right Way PHP之道</a><br>除了编码规范之外的各种 PHP 的最佳实践，还包括一些设计模式，安全问题，以及服务部署，Docker 虚拟化以及各种资源。</p><p><a href="http://www.php-fig.org/psr/" target="_blank" rel="noopener">PHP FIG</a>，PHP 编码规范及标准推荐。<br><a href="https://learnku.com/docs/psr" target="_blank" rel="noopener">PHP PSR 标准规范</a></p><p><a href="https://github.com/jupeter/clean-code-php" target="_blank" rel="noopener">Clean Code PHP</a>，《代码整洁之道》的 PHP 实践。</p><p><a href="https://coolshell.cn/?s=TCP%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF" target="_blank" rel="noopener">TCP的那些事儿</a></p><p><a href="https://segmentfault.com/a/1190000018631870" target="_blank" rel="noopener">MySQL数据库 优化</a></p><p><a href="https://www.jishuchi.com/read/mysql-interview/2810" target="_blank" rel="noopener">MySQL 数据库优化的思路</a></p><p><a href="https://www.jishuchi.com/read/mysql-interview/2791" target="_blank" rel="noopener">MySQL 索引最左前缀原则</a></p><p><a href="https://www.jishuchi.com/books/mysql-interview" target="_blank" rel="noopener">MySQL 面试题</a></p><p><a href="https://www.jishuchi.com/explore?cid=6&amp;tab=popular" target="_blank" rel="noopener">PHP 技术池</a></p><p><a href="https://developer.aliyun.com/article/756895" target="_blank" rel="noopener">MySQL数据库优化大全方法汇总</a></p><p><a href="https://learnku.com/articles/5396/how-many-ways-does-php-send-http-requests" target="_blank" rel="noopener">PHP 发送 HTTP 请求的几种方式</a></p><p><a href="https://www.cnblogs.com/lxj0205/p/9360826.html" target="_blank" rel="noopener">PHP使用CURL详解</a></p><h3 id="什么是死锁？怎么解决？"><a href="#什么是死锁？怎么解决？" class="headerlink" title="什么是死锁？怎么解决？"></a>什么是死锁？怎么解决？</h3><p>死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方的资源，从而导致恶性循环的现象。</p><p>常见的解决死锁的方法</p><p>1、如果不同程序会并发存取多个表，尽量约定以相同的顺序访问表，可以大大降低死锁机会。</p><p>2、在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁产生概率；</p><p>3、对于非常容易产生死锁的业务部分，可以尝试使用升级锁定颗粒度，通过表级锁定来减少死锁产生的概率；</p><p>如果业务处理不好可以用分布式事务锁或者使用乐观锁</p><h3 id="数据库的乐观锁和悲观锁是什么？怎么实现的？"><a href="#数据库的乐观锁和悲观锁是什么？怎么实现的？" class="headerlink" title="数据库的乐观锁和悲观锁是什么？怎么实现的？"></a>数据库的乐观锁和悲观锁是什么？怎么实现的？</h3><p>数据库管理系统（DBMS）中的并发控制的任务是确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性。乐观并发控制（乐观锁）和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。</p><p><strong>悲观锁</strong>：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。在查询完数据的时候就把事务锁起来，直到提交事务。实现方式：使用数据库中的锁机制</p><p><strong>乐观锁</strong>：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。在修改数据的时候把事务锁起来，通过version的方式来进行锁定。实现方式：乐一般会使用版本号机制或CAS算法实现。</p><p><strong>两种锁的使用场景</strong></p><p>从上面对两种锁的介绍，我们知道两种锁各有优缺点，不可认为一种好于另一种，像<strong>乐观锁适用于写比较少的情况下（多读场景）</strong>，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。</p><p>但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行retry，这样反倒是降低了性能，所以<strong>一般多写的场景下用悲观锁就比较合适。</strong></p><p><a href="https://www.cnblogs.com/chenbjin/p/3409934.html" target="_blank" rel="noopener">PHP生成图片验证码(simple)</a></p><p><a href="https://www.51cto.com/article/709614.html" target="_blank" rel="noopener">分库分表</a></p><p><a href="https://zhuanlan.zhihu.com/p/68692685" target="_blank" rel="noopener">Linux 磁盘满了解决方案</a></p><p><a href="https://blog.csdn.net/shangdi1988/article/details/51066098" target="_blank" rel="noopener">Linux服务器如何查看CPU占用率、内存占用、带宽占用</a></p><p><a href="https://www.runoob.com/w3cnote/linux-crontab-tasks.html" target="_blank" rel="noopener">Linux Crontab 定时任务</a></p><p><a href="https://www.runoob.com/redis/redis-intro.html" target="_blank" rel="noopener">Redis</a></p><p><a href="https://firebase-php.readthedocs.io/en/4.x/cloud-messaging.html#cloud-messaging" target="_blank" rel="noopener">Cloud Messaging</a></p><p><a href="https://www.infoq.cn/article/qrczizibtkuq1nsqt2yv" target="_blank" rel="noopener">每小时推送百万级通知</a></p><p><a href="https://www.cnblogs.com/luxiaojun/p/6144748.html" target="_blank" rel="noopener">Selenium + PhantomJS + python 简单实现爬虫的功能</a></p><p><a href="https://mp.weixin.qq.com/s/MMwwYw5OO2qMjeoyjCAd_A" target="_blank" rel="noopener">MySQL索引</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> PHP面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/2021/01/08/rabbitmq/"/>
      <url>/2021/01/08/rabbitmq/</url>
      
        <content type="html"><![CDATA[<h2 id="RabbitMQ-的基本概念"><a href="#RabbitMQ-的基本概念" class="headerlink" title="RabbitMQ 的基本概念"></a>RabbitMQ 的基本概念</h2><blockquote><p><strong>RabbitMQ</strong> 是一种消息队列，用于程序间的通信。形象地说 : MQ就像一个邮局，发送者将消息写入 <strong>MQ</strong>，<strong>MQ</strong> 负责把消息发送给接收者。RabbitMQ 可支持 <code>Java</code>, <code>PHP</code>, <code>Python</code>, <code>Go</code>, <code>JavaScript</code>, <code>Ruby</code> 等多种语言。本文主要介绍 RabbitMQ 的基本概念和模型。</p></blockquote><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p><img src="https://cdn.learnku.com/uploads/images/201608/29/4430/7ZX96izcht.png" alt="file"></p><ul><li><strong>生产者( producer )</strong></li></ul><p><code>在图中为 P，表示消息的发送者。</code></p><ul><li><strong>交换机( exchanges )</strong></li></ul><p><code>在图中为 X, 生产者发过来的消息需要经过交换机，交换机将决定将消息放到哪些队列当中。</code></p><ul><li><strong>队列（queue）</strong></li></ul><p><code>队列在图 1 中由红色矩形阵列表示，负责保存消息和发放消息。</code></p><ul><li><strong>消费者（consumer）</strong></li></ul><p><code>在图中为 C，代表等待接收消息的程序。</code></p><h2 id="信息流"><a href="#信息流" class="headerlink" title="信息流"></a>信息流</h2><ul><li><strong>消息是怎么从生产者传递到消费者的呢？</strong></li></ul><p>首先，生产者发送消息到交换机，同时发送一个 <code>key</code>，通过这个 <code>key</code>，交换机就知道该把消息发到哪个队列。随后交换机把消息发送到相应的队列中。由队列将消息发送给消费者。消费者监听某些队列，当有消息过来时，就立即处理消息。</p><ul><li><strong>提问</strong><ul><li><strong>交换机是如何根据 key 来分配消息到队列？</strong></li><li><strong>队列怎样将消息发送给消费者？</strong></li></ul></li></ul><h2 id="第一个问题"><a href="#第一个问题" class="headerlink" title="第一个问题"></a><strong>第一个问题</strong></h2><ul><li><p><strong>RabbitMQ 的交换机有四种类型：<code>direct</code>, <code>topic</code>, <code>headers</code>, <code>fanout</code></strong></p></li><li><p><strong>fanout</strong></p></li></ul><p><strong>fanout</strong> 交换机就跟广播一样，对消息不作选择地发给所有绑定的队列。以图 1 为例，两个队列都将收到消息。</p><ul><li><strong>direct</strong></li></ul><p><img src="https://cdn.learnku.com/uploads/images/201608/29/4430/VQHBbb0ekr.png" alt="file"><br><code>图 2 direct</code> </p><p>在 <code>direct</code> 模式里，交换机和队列之间绑定了一个 <code>key</code>，只有消息的 <code>key</code> 与绑定了的 <code>key</code> 相同时，交换机才会把消息发给该队列。如图 2 所示，消息的 <code>key</code> 为 <code>orange</code> 时，消息将进入队列 <code>Q1</code> ; <code>key</code> 为 <code>black</code> 或者 <code>green</code> 时，消息将进入队列 <code>Q2</code>。若消息的 <code>key</code> 是其他字符串，被交换机直接遗弃。</p><p><img src="https://cdn.learnku.com/uploads/images/201608/29/4430/odw7uDotKl.png" alt="file"><br><code>图 3 多重绑定</code></p><p>同时，交换机支持多重绑定，多个队列可以以相同的 <code>key</code> 与交换机绑定。如图 3 所示，当消息的 <code>key</code> 为 <code>black</code> 时，消息将进入 <code>Q1</code> 和 <code>Q2</code></p><ul><li><strong>topic</strong></li></ul><p><code>topic</code> 模式可以理解为主题模式，当 <code>key</code> 包涵某个主题时，即可进入该主题的队列。<code>topic</code> 模式的 <code>key</code> 必须具有固定的格式：以 <code>.</code> 作为间隔的一串单词；比如：<code>quick.orange.rabbit</code>，<code>key</code> 最多不能超过 <code>255byte</code>。<br>交换机和队列的key可以以类似正则表达式的方式存在，有两种语法：</p><ol><li><em>* “\</em>“ 可以替代一个单词  **</li><li><strong>“#” 可以替代 0 个或多个单词</strong></li></ol><p><img src="https://cdn.learnku.com/uploads/images/201608/29/4430/xj4u5P913O.png" alt="file"><br><code>图4 topic</code></p><p>图 4。图中，<code>Q1</code> 与交换机绑定的 <code>kye</code> 为：<code>“*.orange.*”</code>，故当消息的 <code>key</code> 为三个单词，且中间的单词为 <code>orange</code> 时，消息将进入 <code>Q1</code>。<code>Q2</code> 与<code>exchange</code> 绑定的 <code>key</code> 为 <code>”rabbit.#”</code>，当消息的 <code>key</code> 以 <code>rabbit</code> 开头时，消息将进入 <code>Q2</code> 。</p><ul><li><strong>headers</strong></li></ul><p>官网没介绍这个模式呀，大概不常用吧。</p><h2 id="第二个问题"><a href="#第二个问题" class="headerlink" title="第二个问题"></a><strong>第二个问题</strong></h2><p><img src="https://cdn.learnku.com/uploads/images/201608/29/4430/zigekpwKxP.png" alt="file"><br><code>图5 Round-robin Dispatching</code></p><ul><li><strong>循环发放（Round-robin dispatching）</strong></li></ul><p>队列分发消息给消费者的方式采用循环发放。举例来说，若队列里有四个消息 <code>w, x, y, z</code>，则 <code>C1</code> 将得到消息 <code>z</code> 和 <code>x</code> , <code>C2</code> 将得到消息 <code>y</code> 和 <code>w</code> 。即每个消费者按顺序每人发一个消息。<br>注意，在这种分配方式下，消息其实在刚进入队列的时候就已经内定好将要被分发的消费者。即 <code>z, x</code> 一定是给 <code>C1</code> . <code>y, w</code> 一定是给 <code>C2</code> 。<br>这种方式存在一些隐患，如果 <code>z</code> 和 <code>x</code> 都是耗时的命令、<code>y</code> , <code>z</code> 都是简单的命令，<code>C1</code> 将不停地工作，而 <code>C2</code> 就比较空闲，造成资源浪费。</p><ul><li><strong>公平发放（fair dispatching）</strong></li></ul><p>公平发放解决了上述问题。这种方式下，队列只会把消息给空闲的消费者。如果它看到某个消费者正忙，就查找下一个空闲消费者。</p><ul><li><strong>消息的确认（Message acknowledgment）</strong></li></ul><p>若没有特别设定，消息一旦被队列分发给消费者，就被 <code>Rabbitmq</code> 从内存中删除。<br>在这种情况下，如果将一个正在处理消息的消费者强行关闭，那么，消息将未被完全处理，且 <code>RabbitMQ</code> 完全不知情。<br>为了解决上述问题，可以配置使得消息处理完后，向 <code>RabbitMQ</code> 返回一个 <code>Acknowledgment</code>。<code>RabbitMQ</code> 直到收到<code>Acknowledgment</code> 后，才将消息删除。<br>当消费者死亡时（its channel is closed, connection is closed, or TCP connection is lost），<code>RabbitMQ</code> 会知道这个消费者发生问题了，将重新发送消息给空闲的消费者。<br>消息没有 <code>TimeOut</code>，即使消费者处理很长很长时间，乃至无穷无尽，<code>RabbmitMQ</code> 也认为消费者正在处理。</p><blockquote><p>其实，消息的确认是默认开启的，不需要特地设置。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TCP和UDP的区别</title>
      <link href="/2021/01/08/tcp-udp-different/"/>
      <url>/2021/01/08/tcp-udp-different/</url>
      
        <content type="html"><![CDATA[<h2 id="TCP与UDP基本区别"><a href="#TCP与UDP基本区别" class="headerlink" title="TCP与UDP基本区别"></a>TCP与UDP基本区别</h2><p>TCP 传输控制协议（英语：Transmission Control Protocol，缩写：TCP）是一种面向连接的、可靠的、基于字节流的传输层通信协议，位于OSI模型的传输层。<br>UDP 用户数据报协议（英语：User Datagram Protocol，缩写：UDP；又称用户数据包协议）是一个简单的面向数据报的通信协议，位于OSI模型的传输层。</p><table style="border-right: medium none; border-top: medium none; border-left: medium none; border-bottom: medium none; border-collapse: collapse" cellspacing="0" cellpadding="0" border="1"><tbody><tr><td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: windowtext 1pt solid; padding-left: 5.4pt; padding-bottom: 0cm; border-left: windowtext 1pt solid; width: 72.3pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent" valign="top" width="96"><div>&nbsp;</div><div>&nbsp;</div></td><td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: windowtext 1pt solid; padding-left: 5.4pt; border-left-color: #ece9d8; padding-bottom: 0cm; width: 93.3pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent" valign="top" width="124"><div>TCP</div></td><td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; border-top: windowtext 1pt solid; padding-left: 5.4pt; border-left-color: #ece9d8; padding-bottom: 0cm; width: 72.3pt; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent" valign="top" width="96"><div>UDP</div></td></tr><tr><td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; padding-left: 5.4pt; padding-bottom: 0cm; border-left: windowtext 1pt solid; width: 72.3pt; border-top-color: #ece9d8; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent" valign="top" width="96"><div>是否连接</div></td><td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; padding-left: 5.4pt; border-left-color: #ece9d8; padding-bottom: 0cm; width: 93.3pt; border-top-color: #ece9d8; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent" valign="top" width="124"><div>面向连接</div></td><td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; padding-left: 5.4pt; border-left-color: #ece9d8; padding-bottom: 0cm; width: 72.3pt; border-top-color: #ece9d8; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent" valign="top" width="96"><div>面向非连接</div></td></tr><tr><td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; padding-left: 5.4pt; padding-bottom: 0cm; border-left: windowtext 1pt solid; width: 72.3pt; border-top-color: #ece9d8; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent" valign="top" width="96"><div>传输可靠性</div></td><td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; padding-left: 5.4pt; border-left-color: #ece9d8; padding-bottom: 0cm; width: 93.3pt; border-top-color: #ece9d8; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent" valign="top" width="124"><div>可靠的</div></td><td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; padding-left: 5.4pt; border-left-color: #ece9d8; padding-bottom: 0cm; width: 72.3pt; border-top-color: #ece9d8; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent" valign="top" width="96"><div>不可靠的</div></td></tr><tr><td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; padding-left: 5.4pt; padding-bottom: 0cm; border-left: windowtext 1pt solid; width: 72.3pt; border-top-color: #ece9d8; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent" valign="top" width="96"><div>应用场合</div></td><td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; padding-left: 5.4pt; border-left-color: #ece9d8; padding-bottom: 0cm; width: 93.3pt; border-top-color: #ece9d8; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent" valign="top" width="124"><div>传输大量的数据</div></td><td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; padding-left: 5.4pt; border-left-color: #ece9d8; padding-bottom: 0cm; width: 72.3pt; border-top-color: #ece9d8; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent" valign="top" width="96"><div>少量数据</div></td></tr><tr><td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; padding-left: 5.4pt; padding-bottom: 0cm; border-left: windowtext 1pt solid; width: 72.3pt; border-top-color: #ece9d8; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent" valign="top" width="96"><div>速度</div></td><td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; padding-left: 5.4pt; border-left-color: #ece9d8; padding-bottom: 0cm; width: 93.3pt; border-top-color: #ece9d8; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent" valign="top" width="124"><div>慢</div></td><td style="border-right: windowtext 1pt solid; padding-right: 5.4pt; padding-left: 5.4pt; border-left-color: #ece9d8; padding-bottom: 0cm; width: 72.3pt; border-top-color: #ece9d8; padding-top: 0cm; border-bottom: windowtext 1pt solid; background-color: transparent" valign="top" width="96"><div>快</div></td></tr></tbody></table><ul><li><p>TCP与UDP基本区别</p><ul><li>基于连接与无连接</li><li>TCP要求系统资源较多，UDP较少； </li><li>UDP程序结构较简单 </li><li>流模式（TCP）与数据报模式(UDP); </li><li>TCP保证数据正确性，UDP可能丢包 </li><li>TCP保证数据顺序，UDP不保证 　　</li></ul></li><li><p>UDP应用场景：</p><ul><li>面向数据报方式</li><li>网络数据大多为短消息 </li><li>拥有大量Client</li><li>对数据安全性无特殊要求</li><li>网络负担非常重，但对响应速度要求高</li></ul></li><li><p>TCP协议和UDP协议特性区别总结：</p><ul><li>TCP协议在传送数据段的时候要给段标号；UDP协议不</li><li>TCP协议可靠；UDP协议不可靠</li><li>TCP协议是面向连接；UDP协议采用无连接</li><li>TCP协议负载较高，采用虚电路；UDP采用无连接</li><li>TCP协议的发送方要确认接收方是否收到数据段（3次握手协议）</li><li>TCP协议采用窗口技术和流控制  </li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
            <tag> TCP </tag>
            
            <tag> UDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笛卡尔积算法（PHP实现）</title>
      <link href="/2020/08/01/cartesian-product-by-php/"/>
      <url>/2020/08/01/cartesian-product-by-php/</url>
      
        <content type="html"><![CDATA[<h2 id="第一、定义"><a href="#第一、定义" class="headerlink" title="第一、定义"></a>第一、定义</h2><p>笛卡尔乘积是指在数学中，两个集合X和Y的笛卡尔积（Cartesian product），又称直积，表示为X×Y，第一个对象是X的成员而第二个对象是Y的所有可能有序对的其中一个成员</p><p><img src="https://bkimg.cdn.bcebos.com/pic/2934349b033b5bb57f0eb50b36d3d539b700bc6e?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2U5Mg==,g_7,xp_5,yp_5" alt="笛卡尔积"></p><p>假设集合A={a, b}，集合B={0, 1, 2}，则两个集合的笛卡尔积为{(a, 0), (a, 1), (a, 2), (b, 0), (b, 1), (b, 2)}。</p><p>类似的例子有，如果A表示某学校学生的集合，B表示该学校所有课程的集合，则A与B的笛卡尔积表示所有可能的选课情况。A表示所有声母的集合，B表示所有韵母的集合，那么A和B的笛卡尔积就为所有可能的汉字全拼。</p><p>设A,B为集合，用A中元素为第一元素，B中元素为第二元素构成有序对，所有这样的有序对组成的集合叫做A与B的笛卡尔积，记作AxB.<br>笛卡尔积的符号化为：</p><blockquote><p>A×B={(x,y)|x∈A∧y∈B}<br>例如，A={a,b}, B={0,1,2}，则<br>A×B={(a, 0), (a, 1), (a, 2), (b, 0), (b, 1), (b, 2)}<br>B×A={(0, a), (0, b), (1, a), (1, b), (2, a), (2, b)}</p></blockquote><h2 id="第二-、运算"><a href="#第二-、运算" class="headerlink" title="第二 、运算"></a>第二 、运算</h2><ol><li><p>对任意集合A，根据定义有</p><blockquote><p>AxΦ =Φ , Φ xA=Φ</p></blockquote></li><li><p>一般地说，笛卡尔积运算不满足交换律，即</p><blockquote><p>AxB≠BxA（当A≠Φ ∧B≠Φ∧A≠B时）</p></blockquote></li><li><p>笛卡尔积运算不满足结合律，即</p><blockquote><p>(AxB)xC≠Ax(BxC)（当A≠Φ ∧B≠Φ∧C≠Φ时)</p></blockquote></li><li><p>笛卡尔积运算对并和交运算满足分配律，即</p><blockquote><p>Ax(B∪C)=(AxB)∪(AxC)<br>(B∪C)xA=(BxA)∪(CxA)<br>Ax(B∩C)=(AxB)∩(AxC)<br>(B∩C)xA=(BxA)∩(CxA)</p></blockquote></li></ol><h2 id="第三-、程序算法"><a href="#第三-、程序算法" class="headerlink" title="第三 、程序算法"></a>第三 、程序算法</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Cartesian</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$matrix</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @param array $matrix     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setMatrix</span> <span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$matrix</span><span class="token punctuation">)</span><span class="token punctuation">:</span> void <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">matrix</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$matrix</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">exportData</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">matrix</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">matrix</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">logic</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$list</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$list</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">logic</span> <span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token variable">$list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$item</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token variable">$temp</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>                <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$list</span><span class="token punctuation">,</span> <span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$forupdate</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$list</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$_temp</span> <span class="token operator">=</span> <span class="token variable">$v</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$item</span> <span class="token keyword">as</span> <span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$__temp</span> <span class="token operator">=</span> <span class="token variable">$_temp</span><span class="token punctuation">;</span>                <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$__temp</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$forupdate</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$__temp</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token variable">$list</span> <span class="token operator">=</span> <span class="token variable">$forupdate</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 使用方法</span>    <span class="token variable">$cartesian</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cartesian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$cartesian</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMatrix</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'红色'</span><span class="token punctuation">,</span><span class="token string">'黄色'</span><span class="token punctuation">,</span><span class="token string">"蓝色"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$cartesian</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMatrix</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'L'</span><span class="token punctuation">,</span><span class="token string">'XL'</span><span class="token punctuation">,</span><span class="token string">'XXL'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$cartesian</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMatrix</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'北京'</span><span class="token punctuation">,</span><span class="token string">'郑州'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$cartesian</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMatrix</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$dd</span> <span class="token operator">=</span>  <span class="token variable">$cartesian</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">exportData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$dd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 数学 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引</title>
      <link href="/2020/07/10/mysql-index/"/>
      <url>/2020/07/10/mysql-index/</url>
      
        <content type="html"><![CDATA[<h2 id="一、考点"><a href="#一、考点" class="headerlink" title="一、考点"></a>一、考点</h2><h3 id="1、MySQL索引的基础和类型"><a href="#1、MySQL索引的基础和类型" class="headerlink" title="1、MySQL索引的基础和类型"></a>1、MySQL索引的基础和类型</h3><h4 id="1）索引的基础"><a href="#1）索引的基础" class="headerlink" title="1）索引的基础"></a>1）索引的基础</h4><blockquote><ul><li>索引类似于书籍的目录，要想找到一本书的某个特定主题，需要先查找书的目录，定位对于的页码。</li><li>存储引擎使用类似的方式进行数据查询，先去索引当中找到对应的值，然后根据匹配的索引找到对应的数据行。</li></ul></blockquote><h4 id="2）索引对性能的影响"><a href="#2）索引对性能的影响" class="headerlink" title="2）索引对性能的影响"></a>2）索引对性能的影响</h4><blockquote><ul><li>大大减少服务器需要扫描的数据量（如：数据表中有1000条数据，我们只需要根据条件查询其中的一条，正针对该列创建一个索引，只需要扫描这一条即可；如果不创建索引，我们得扫描1000条）；</li><li>帮助服务器避免排序和临时表的生成；</li><li>将随机 I/O 变成 顺序 I/O；</li><li>大大提高查询速度；</li><li>降低写（增、删、改）的速度（由于对数据表进行写操作的时候，会额外的操作的操作一遍索引）、占用磁盘（本身来说，索引也是一种数据）。【不良影响】</li></ul></blockquote><h4 id="3）索引的使用场景"><a href="#3）索引的使用场景" class="headerlink" title="3）索引的使用场景"></a>3）索引的使用场景</h4><blockquote><ul><li>对于非常小的表，大部分情况下全表扫描效率更高（不需要创建索引）；</li><li>中大型表，索引非常有效</li><li>特大型的表，建立和使用索引的代价将随之增长，可以使用分区技术来解决</li></ul></blockquote><h4 id="4）索引的类型"><a href="#4）索引的类型" class="headerlink" title="4）索引的类型"></a>4）索引的类型</h4><p>索引有很多种类型，都是实现在存储引擎层的。</p><blockquote><ul><li><strong>普通索引</strong>：最基本的索引，没有任何约束限制。</li><li><strong>唯一索引</strong>：与普通索引类似，但是 具有唯一性约束。</li><li><strong>主键索引</strong>：特殊的唯一索引，不允许有空值。</li><li><strong>组合索引</strong>：将多个列组合在一起创建，可以覆盖多个列。</li><li><strong>外键索引</strong>：只有 InnoDB类型的表才可以使用外键索引，保证数据的一致性、完整性和实现级联操作。【基本上不使用】</li><li><strong>全文索引</strong>：MySQL自带的全文索引只能用于 MyISAM，并且只能对英文进行全文检索。【基本上不使用】</li></ul></blockquote><p><strong>常考题：唯一索引 与主键索引 当前区别是什么？</strong></p><blockquote><ul><li>一个表只能有一个主键索引，可以有多个唯一索引；</li><li>主键索引一定是唯一索引， 唯一索引不是主键索引；</li><li>主键可以与外键 构成 <strong>参照完整性约束</strong>， 防止数据不一致。</li></ul></blockquote><h3 id="2、延伸"><a href="#2、延伸" class="headerlink" title="2、延伸"></a>2、延伸</h3><h4 id="1）MySQL索引的创建原则"><a href="#1）MySQL索引的创建原则" class="headerlink" title="1）MySQL索引的创建原则"></a>1）MySQL索引的创建原则</h4><blockquote><p>① 最适合索引的列是出现在 WHERE子句中的列，或连接子句中的列，而不是出现在 SELECT关键字后的列（where/on 后面的列）；<br>② 索引列的基数越大，索引的效果越好；<br>③ 对字符串进行索引，应该制定一个前缀长度，可以节省大量的索引空间；<br>④ 根据情况创建复合索引，复合索引可以提高查询效率；<br>⑤ 避免创建过多索引，索引会额外占用磁盘空间，降低写操作效率；<br>⑥ 主键尽可能选择较短的数据类型（如：int/bigint），可以有效减少索引的磁盘占用，提高查询效率。</p></blockquote><h4 id="2）MySQL索引的注意事项"><a href="#2）MySQL索引的注意事项" class="headerlink" title="2）MySQL索引的注意事项"></a>2）MySQL索引的注意事项</h4><p><strong>① 复合索引遵循前缀原则；</strong></p><pre><code>// 创建一个索引KEY(a, b, c); // 以下3种情况该索引生效：WHERE a=1 and b=2 and c=3;WHERE a=1 and b=2;WHERE a=1// 以下2情况该索引不生效：WHERE b=2 and c=3; // 因为跳过了aWHERE a=1 and c=3; // 因为跳过了b</code></pre><p><strong>常考题：</strong></p><ul><li>题目：我创建了一个 WHERE a=1 and b=2 或者 WHERE a=1这样的查询，我需要创建一个什么样的索引比较合适？<blockquote><p>答案：KEY(a, b)；<br>注：KEY(a, b,c) 表示 创建了一个索引，同时作用于a,b,c，目的是为了缩短查询范围（如：创建一个组合索引，章节段，查询第几章中的第几节的第几段，这样缩短了查询的范围）。</p></blockquote></li></ul><p><strong>② like 查询，% 不能在前，会使索引失效，一定要用可以使用全文索引；</strong></p><pre><code>where name like "%wang%"; // 不要使用该方法， 索引失效</code></pre><p><strong>③ column is null 可以使用索引；</strong></p><p><strong>④ 如果MySQL估计使用索引比全表扫描更慢，会放弃使用索引；</strong></p><p>假设表中有100条数据，在写条件的时候这样写</p><pre><code>where id &gt; 1 and id &lt; 100 </code></pre><p>即使对 ID设置了索引，在搜索的时候，搜索的是 2~99 之间的数据。</p><blockquote><p>搜索过程：首先找 2 这条数据，去索引中看看它在什么位置，找到索引后，再去定位数据行；然后再去看 3， 再去看索引，再去找数据行，；再去看 4，再去看索引，再去找数据行，… ，一直到 99 都要这样去操作。</p></blockquote><p>所以在这里面本身来说，我们这样来查询，<strong>首先我们会多一个查询索引的步骤</strong>，所以MySQL认为，本身就100条数据，要查询其中的98条数据，而这98条数据都需要去看索引，所以就很慢，直接把这100条数据都扫描一遍，然后返回其中的98条 不就可以了么，这样效率会更高，它会自动去放弃，不需要我们手动放弃，这是我们优化器做得事。</p><p><strong>⑤ 如果 or 前的条件中的列有索引，后面的没有，索引都不会被用到；</strong></p><pre><code>where a or b; // 如果a中有索引，b中没有索引，该索引就会失效</code></pre><p><strong>⑥ 列类型是字符串类型，查询时一定要给值加引号，否则索引失效。</strong></p><pre><code>// 在创建的时候设置了 name varchar(16)// 搜索的时候，name为100where name = 100； // 写成这样的形式，可以搜索到，但是没有用到索引【因为本身是字符串类型，而写成了整型】where name = "100"; // 此时才用到了索引【一定要给值加引号】</code></pre><h2 id="二、解题方法"><a href="#二、解题方法" class="headerlink" title="二、解题方法"></a>二、解题方法</h2><blockquote><p>在一些 MySQL索引 基础考题中，我们可以轻松的通过索引基础和类型来解决此类问题，对于一些索引创建注意事项方面的考点，我们可以通过索引创建原则和注意事项来解决。</p></blockquote><h2 id="三、真题"><a href="#三、真题" class="headerlink" title="三、真题"></a>三、真题</h2><h3 id="创建-MySQL复合索引（组合索引）-应该注意哪些事项？"><a href="#创建-MySQL复合索引（组合索引）-应该注意哪些事项？" class="headerlink" title="创建 MySQL复合索引（组合索引） 应该注意哪些事项？"></a>创建 MySQL复合索引（组合索引） 应该注意哪些事项？</h3><ul><li>遵循前缀原则</li><li>看查询条件（如果查询条件中是 WHERE a=1 AND b=2 我们可以创建一个 KEY(a,b) 这样的复合索引 ，如果搜索 WHERE a=1 时，该索引也可以被使用到）。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PHP面试题】请写出下面 MySQL 数据类型表达的意义（int(0)、char(16)、varchar(16)、datetime、text）。</title>
      <link href="/2020/07/10/mysql-data-type/"/>
      <url>/2020/07/10/mysql-data-type/</url>
      
        <content type="html"><![CDATA[<h2 id="一、考点"><a href="#一、考点" class="headerlink" title="一、考点"></a>一、考点</h2><h3 id="1、MySQL数据类型"><a href="#1、MySQL数据类型" class="headerlink" title="1、MySQL数据类型"></a>1、MySQL数据类型</h3><p>① 整型类型<br>TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT</p><blockquote><ul><li>属性：UNSIGNED（以上的类型，都可以配合 UNSIGNED 来使用，变成非负数。）</li><li>长度：可以为整数类型指定宽度，例如：INT（11）、对大多数应用是没有意义的，它不会限制值得合法范围，只会影响 显示字符的个数。</li></ul></blockquote><pre><code>int(3) : 代表如果存入的是 12，则会补个0，即012,int(5) : 代表如果存入的是 12，则会补3个0，即00012，注：此处的数字代表的是宽度。</code></pre><p>② 实数类型<br>FLOAT、DOUBLE、DECIMAL</p><blockquote><ul><li>DECIMAL 可存储比 BIGINT还大的整数；可以用于存储精确的小数；</li><li>FLOAT 和 DOUBLE 类型支持使用标准的浮点进行近似计算。</li></ul></blockquote><p>③ 字符串类型</p><ul><li><p>VARCHAR</p><blockquote><ul><li>VARCHAR 类型用于存储可变长字符串，它比定长类型更节省空间；</li><li>VARCHAR 使用1或2个额外字节记录字符串的长度，列长度小于255字节，使用1个字节表示，否则用2个；</li><li>VARCHAR 长度，如果存储内容超出指定长度，会被截断；</li></ul></blockquote></li><li><p>CHAR</p><blockquote><ul><li>CHAR 是定长的，根据定义的字符串长度分配足够的空间；</li><li>CHAR 会根据需要采用空格进行填充以方便比较；</li><li>CHAR 适合存储很短的字符串，或者所有值都接近同一个长度；</li><li>CHAR 长度，超出设定的长度，会被截断；</li><li><strong>对于经常变更的数据来说，CHAR 比 VARCHAR更好，CHAR不容易产生碎片；</strong></li><li><strong>对于非常短的列，CHAR 比 VARCHAR 在存储空间上更有效率；</strong></li><li><strong>只分配真正需要的空间，更长的列会消耗更多的内容；</strong></li><li><strong>尽量避免使用BLOB/TEXT类型，查询会使用临时表，导致严重的性能开销。</strong></li></ul></blockquote></li></ul><p>④ 枚举</p><blockquote><ul><li>有时可以使用枚举代替常用的字符串类型；</li><li>把不重复的集合存储成一个预定义的集合（如：定义性别，用 enum，enum(‘男’，‘女’)）；</li><li>非常紧凑，把列表值压缩到一个或两个字节；</li><li>内部存储的是整数（如：enum（‘男’，‘女’），内部是0,1）；</li><li>尽量避免使用数字作为 ENUM枚举 的常量，易混乱；</li><li>排序是按照内部存储的整数进行排序；</li><li>枚举表会使表的大小 大大减小 。</li></ul></blockquote><p>⑤ 日期和时间类型</p><blockquote><ul><li>尽量使用 TIMESTAMP，比 DATETIME 空间效率高；</li><li>用整数保存时间戳的格式通常不方便处理；</li><li>如果需要存储微秒，可以使用 bigint 存储。</li></ul></blockquote><p>⑥ 列属性</p><pre><code>auto_increment、default、not null、zerofill</code></pre><h3 id="2、延伸"><a href="#2、延伸" class="headerlink" title="2、延伸"></a>2、延伸</h3><h4 id="1）-MySQL基础操作"><a href="#1）-MySQL基础操作" class="headerlink" title="1） MySQL基础操作"></a>1） MySQL基础操作</h4><p>常见操作</p><pre><code>MySQL的连接和关闭：mysql -u(用户名) -p（密码） -h（主机） -P（端口）其他：\G; // 将打印结果垂直显示\c; // 取消当前MySQL的命令\q; // 退出MySQL\s; // 显示MySQL的服务器状态 \h; // 帮助信息\d; // 改变执行服务（如：把 分号 改成其他符号）</code></pre><h4 id="2）-MySQL数据表引擎"><a href="#2）-MySQL数据表引擎" class="headerlink" title="2） MySQL数据表引擎"></a>2） MySQL数据表引擎</h4><p><strong>① InnoDB 表引擎【推荐使用】</strong></p><blockquote><ul><li>默认事务型引擎，最重要最广泛的存储引擎，性能非常优秀；</li><li>数据存储在共享表空间，可以通过配置分开；</li><li>对主键查询的性能高于其他类型的存储引擎；</li><li>内部做了很多优化，从磁盘读取数据时自动在内存构建 hash索引，插入数据时自动构建插入缓冲区；</li><li>通过一些机制和工具支持真正的热备份；</li><li>支持奔溃后的安全恢复；</li><li>支持行级锁；</li><li>支持外键。</li></ul></blockquote><p><strong>② MyISAM 表引擎</strong></p><blockquote><ul><li>5.1版本前，MyISAM是默认的存储引擎；</li><li>拥有全文索引、压缩、空间函数；</li><li>不支持事务和行级锁，不支持崩溃后的安全恢复；</li><li>表存储在两个文件 ，MYD 和 MYI（存储数据和索引）；</li><li>设计简单，某些场景下性能很好</li></ul></blockquote><p><strong>③ 其他表引擎</strong></p><pre><code>ArchiveBlackholeCSVMemory...</code></pre><p>注：在进行 表引擎 选择的时候，优先选择 <code>InnoDB</code> ，它的性能十分得好。</p><h4 id="3）-MySQL锁机制"><a href="#3）-MySQL锁机制" class="headerlink" title="3） MySQL锁机制"></a>3） MySQL锁机制</h4><p><strong>① 基础概念</strong></p><blockquote><p>表锁是日常开发当中常见的问题，因此也是面试当中最常见的考察点，当多个查询同一个时刻进行数据修改时，就会产生并发控制的问题。<br>分为 <code>共享锁</code> 和 <code>排他锁</code> ，其实就是 <code>读锁</code> 和 <code>写锁</code> 。</p></blockquote><p><strong>② 读锁</strong></p><blockquote><p>共享的，不堵塞，多个用户可以同时读一个资源，互不干扰。</p></blockquote><p><strong>③ 写锁</strong></p><blockquote><p>排他锁，一个写锁会阻塞其他的写锁和读锁，这样可以只允许一个人进行写入，防止其他用户读取正在写入的资源。</p></blockquote><p>使用场景：</p><blockquote><ul><li>为了防止这条数据正在修改，然后有人过来访问的时候，以为这条数据就是最新数据；</li><li>两个人都对同一条数据进行修改，防止把数据改乱。</li></ul></blockquote><p><strong>④ 锁粒度</strong></p><blockquote><ul><li>表锁，系统性能开销最小，会锁定整张表，MyISAM使用表锁。</li><li>行锁，最大程度地支持并发处理，但是也带来了最大的锁开销，InnoDB实现行级锁。</li></ul></blockquote><h4 id="4）-MySQL事务处理、存储过程、触发器"><a href="#4）-MySQL事务处理、存储过程、触发器" class="headerlink" title="4） MySQL事务处理、存储过程、触发器"></a>4） MySQL事务处理、存储过程、触发器</h4><p><strong>① 事务处理</strong></p><blockquote><ul><li>MySQL提供事务处理的表引擎，InnoDB；</li><li>服务器层不管理事务，由下层的引擎实现，所以同一个事务中，使用多种存储引擎不靠谱（如：在操作两张表的时候，不能一张表用 MyISAM，另一张表用 InnoDB，这样对于事务操作是无法成功的，我们要求两张表都是 InnoDB）；</li><li>在非事务的表上执行事务操作MySQL不会发出提醒，也不会报错（在做事务处理的时候，一定要检查我们的表引擎是否是 InnoDB）。</li></ul></blockquote><p><strong>② 存储过程</strong></p><ul><li>为以后的使用而保存的一条或多条MySQL语句的集合（即把多条SQL语句保存在一个集合中）；</li><li>存储过程就是有业务逻辑和流程的集合；</li><li>可以在存储过程中创建表，更新数据，删除数据等等。</li></ul><p>使用场景：</p><blockquote><ul><li>通过把处理封装在容易使用的单元中，简化复杂得操作（如：在进行一个事务或者操作的时候，里面进行了上百条或者更多的SQL语句的操作，这个时候可以把它封装起来，别人想用的时候，直接让他拿过来用即可，不用再去写那么多条的SQL语句）;</li><li>保证数据的一致性；</li><li>简化对变动的管理。</li></ul></blockquote><p><strong>③ 触发器</strong></p><blockquote><p>提供给程序员和数据分析员来保证数据完整性的一种方法，它是与表事件相关的特殊的存储过程。</p></blockquote><p>使用场景：</p><ul><li>可通过数据库中的相关表实现级联更改（如：改一张表，让其自动去改另一张表）；</li><li>实时监控某张表中的某个字段的更改而需要做出相应的处理；</li><li>某些业务编号的生成等。</li></ul><p>注意事项：滥用会造成数据库及应用程序的维护困难。</p><h2 id="二、解题方法"><a href="#二、解题方法" class="headerlink" title="二、解题方法"></a>二、解题方法</h2><blockquote><p>牢记以上基础知识点，理解数据类型 CHAR 和 VARCHAR 的差异，表存储引擎 InnoDB 和 MyISAM 的区别。</p></blockquote><h2 id="三、真题"><a href="#三、真题" class="headerlink" title="三、真题"></a>三、真题</h2><h3 id="1、请写出下面-MySQL-数据类型表达的意义（int-0-、char-16-、varchar-16-、datetime、text）。"><a href="#1、请写出下面-MySQL-数据类型表达的意义（int-0-、char-16-、varchar-16-、datetime、text）。" class="headerlink" title="1、请写出下面 MySQL 数据类型表达的意义（int(0)、char(16)、varchar(16)、datetime、text）。"></a>1、请写出下面 MySQL 数据类型表达的意义（int(0)、char(16)、varchar(16)、datetime、text）。</h3><blockquote><ul><li>int(0) : 整型，宽度为0位；</li><li>char(16)：定长字符串，字符串的宽度为16位；</li><li>varchar(16)：可变长度字符串，长度为16位；</li><li>datetime：时间日期；</li><li>text：存储字符串类型，存储一些大文本数据。</li></ul></blockquote><h3 id="2、说明表存储引擎-InnoDB-和-MyISAM-的区别。"><a href="#2、说明表存储引擎-InnoDB-和-MyISAM-的区别。" class="headerlink" title="2、说明表存储引擎 InnoDB 和 MyISAM 的区别。"></a>2、说明表存储引擎 InnoDB 和 MyISAM 的区别。</h3><blockquote><ul><li>InnoDB 支持 行锁，MyISAM 支持 表锁；</li><li>InnoDB 支持 事务处理，MyISAM 不支持 事务处理；</li><li>InnoDB 默认 使用共享表空间，MyISAM 不使用共享表空间；</li><li>InnoDB 存储在 共享表空间，MyISAM的 数据保存在.MYI文件中，索引保存在.MYD的文件中。</li></ul></blockquote><h3 id="3、MySQL中出现行锁、表锁，分别如何处理？"><a href="#3、MySQL中出现行锁、表锁，分别如何处理？" class="headerlink" title="3、MySQL中出现行锁、表锁，分别如何处理？"></a>3、MySQL中出现行锁、表锁，分别如何处理？</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2020/07/10/linux-command/"/>
      <url>/2020/07/10/linux-command/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><h3 id="1）-系统安全"><a href="#1）-系统安全" class="headerlink" title="1） 系统安全"></a>1） 系统安全</h3><ul><li>sudo // 超级用户</li><li>su // 用于切换当前用户身份到其他身份，变更时需输入所要变更的用户账号与密码。</li><li>chmod // 用来变更文件或目录的权限</li><li>setfacl // 设置文件访问控制列表</li></ul><h3 id="2）-进程管理"><a href="#2）-进程管理" class="headerlink" title="2） 进程管理"></a>2） 进程管理</h3><ul><li>w // 用于显示已经登陆系统的用户列表，并显示用户正在执行的指令。</li><li>top // 可以实时动态地查看系统的整体运行情况，是一个综合了多方信息监测系统性能和运行信息的实用工具。</li><li>ps // 用于报告当前系统的进程状态。</li><li>kill // 用来删除执行中的程序或工作。</li><li>pkill // 可以按照进程名杀死进程。</li><li>pstree // 以树状图的方式展现进程之间的派生关系，显示效果比较直观。</li><li>killall // 使用进程的名称来杀死进程，使用此指令可以杀死一组同名进程。</li></ul><h3 id="3）-用户管理"><a href="#3）-用户管理" class="headerlink" title="3） 用户管理"></a>3） 用户管理</h3><ul><li>id        // 可以显示真实有效的用户ID（UID）和组ID（GID）。</li><li>usermod   // 用于修改用户的基本信息。</li><li>useradd   // 用于 Linux中创建的新的系统用户。</li><li>groupadd  // 用于创建一个新的工作组，新工作组的信息将被添加到系统文件中。</li><li>userdel   // 用户删除给定的用户，以及与用户相关的文件。若不加选型，则进删除用户账号，而不删除相关文件。</li></ul><h3 id="4）-文件系统"><a href="#4）-文件系统" class="headerlink" title="4） 文件系统"></a>4） 文件系统</h3><ul><li>mount // 用户加载文件系统到指定的加载点。</li><li>umount // 用于卸载已经加载的文件。</li><li>fsck // 用于检查并且试图修复文件系统中的错误。</li><li>df // 用于显示磁盘分区上的可使用的磁盘空间。</li><li>du // 对文件和目录磁盘使用的空间的查看。</li></ul><h3 id="5）-系统关机和重启"><a href="#5）-系统关机和重启" class="headerlink" title="5） 系统关机和重启"></a>5） 系统关机和重启</h3><ul><li>shutdown // 关机</li><li>reboot // 重启</li></ul><h3 id="6）-网络应用"><a href="#6）-网络应用" class="headerlink" title="6） 网络应用"></a>6） 网络应用</h3><ul><li>curl // 是一个利用URL规则在命令行下工作的文件传输工具。</li><li>telnet // 用于登录远程主机，对远程主机进行管理。</li><li>mail // 命令行的电子邮件发送和接收工具。</li><li>elinks // 能实现一个纯文本界面的WWW浏览器，操作方式与”lynx”类似。</li></ul><h3 id="7）-网络测试"><a href="#7）-网络测试" class="headerlink" title="7） 网络测试"></a>7） 网络测试</h3><ul><li>ping // 用于测试主机之间网络的连通性。</li><li>netstat // 用来打印Linux中网络系统的状态信息，可让你得知整个Linux系统的网络情况。</li><li>host // 常用的分析域名查询工具，可以用来测试域名系统工作是否正常。</li></ul><h3 id="8）-网络配置"><a href="#8）-网络配置" class="headerlink" title="8） 网络配置"></a>8） 网络配置</h3><ul><li>hostname // 用于显示和设置系统的主机名称。</li><li>ifconfig // 被用于配置和显示Linux内核中网络接口的网络参数。</li></ul><h3 id="9）-常用工具"><a href="#9）-常用工具" class="headerlink" title="9） 常用工具"></a>9） 常用工具</h3><ul><li>ssh // 时openssh套件中的客户端连接工具，可以给予ssh加密协议实现安全的远程登录服务器。</li><li>screen // 是一款由GNU计划开发的用于命令行终端切换的自由软件。</li><li>clear // 用于清除当前屏幕终端上的任何信息。</li><li>who // 显示当前登录系统的用户信息。</li><li>date // 显示或设置系统时间与日期。</li></ul><h3 id="10）-软件包管理"><a href="#10）-软件包管理" class="headerlink" title="10） 软件包管理"></a>10） 软件包管理</h3><ul><li>yum // 提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</li><li>rpm // rpm软件包的管理工具。</li><li>apt-get // Debian Linux发行版中的APT软件包管理工具。所有基于Debian的发行都使用这个包管理系统。deb包可以把一个应用的文件包在一起，大体如同 Windows上的安装文件。</li></ul><h3 id="11）-文件查找和比较"><a href="#11）-文件查找和比较" class="headerlink" title="11） 文件查找和比较"></a>11） 文件查找和比较</h3><ul><li>locate // 用来查找文件或目录。</li><li>find // 用来在指定目录下查找文件。</li></ul><h3 id="12）-文件内容查看"><a href="#12）-文件内容查看" class="headerlink" title="12） 文件内容查看"></a>12） 文件内容查看</h3><ul><li>head // 用于显示文件的开头的内容。在默认情况下，head命令显示文件的头10行内容。</li><li>tail // 用于输入文件中的尾部内容。tail命名默认在屏幕上显示指定文件的末尾10行。</li><li>more // 用来浏览文件档案的内容（只能向前浏览）。</li><li>less // 用来浏览文字档案的内容，允许用户向前或向后浏览文件。使用该命令时，用PageUp键向上翻页，用PageDown键向下翻页。要退出less程序，应按Q键。</li></ul><h3 id="13）-文件处理"><a href="#13）-文件处理" class="headerlink" title="13） 文件处理"></a>13） 文件处理</h3><ul><li>unlink // 用于系统调用函数 unlink 去删除指定的文件。</li><li>rename // 用字符串替换的方式批量改变文件名。</li><li>cat // 连接文件并打印到标准输出设备上，cat经常用来显示文件的内容。</li><li>touch // 有两个功能：一是用于把已存在文件的时间标签更新为系统当前的时间（默认方式），它们的数据将原封不动地保留下来；二是用来创建新的空文件。</li><li>ln // 用来为文件创建连接，连接类型分为硬连接和符号连接两种，默认的连接类型是硬连接。如果要创建符号连接必须使用”-s”选项（注意：符号链接文件不是一个独立的文件，它的许多属性依赖于源文件，所以给符号链接文件设置存取权限时没有意义的）</li></ul><h3 id="14）-目录操作"><a href="#14）-目录操作" class="headerlink" title="14） 目录操作"></a>14） 目录操作</h3><ul><li>cd // 用来切换工作目录至 dirname。</li><li>mv // 用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录中。</li><li>rm // 可以删除一个目录中的一个或多个文件或目录，也可以将某个目录及其下属的所有文件及其子目录均删除掉。</li><li>pwd // 以绝对路径的方式显示用户当前工作目录。</li><li>tree // 以树状图列出目录的内容。</li><li>cp // 用来将一个或过个源文件或者目录复制到指定的目的文件或目录。</li><li>ls // 用来显示目录列表，在 Linux中是使用率较高的命令。ls命令的输出信息可以进行彩色加亮显示，以区分不同类型的文件。</li></ul><h3 id="15）-文件权限属性"><a href="#15）-文件权限属性" class="headerlink" title="15） 文件权限属性"></a>15） 文件权限属性</h3><ul><li>setfacl // 用来变更文件或目录的权限。</li><li>chmod // 设置文件访问控制列表。</li><li>chgrp // 用来改变文件或目录所属的用户组。</li><li>chown // 改变某个文件或目录的所有者和所属的组，该命令可以向某个用户授权，使该用户变成指定文件的所有者。或者改变所属的组。（用户可以是用户或者是用户ID，用户组可以是组名或组ID。文件可以是由空格分开的文件列表，在文件名中可以包含通配符）【只有文件主和超级用户才可以使用该命令】</li></ul><h3 id="16）-文件传输"><a href="#16）-文件传输" class="headerlink" title="16） 文件传输"></a>16） 文件传输</h3><ul><li>ftp // 用来设置文件系统相关功能。</li><li>scp // 用于在Linux下远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读 read only system 时，用 scp 可以帮你把文件移出来。另外，scp还非常节省资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync 比 scp 会快一点，但当小文件众多的情况下，rsync 会导致硬盘 I/O 非常高，而 scp 基本不影响系统正常使用。</li></ul><h2 id="Linux系统定时任务"><a href="#Linux系统定时任务" class="headerlink" title="Linux系统定时任务"></a>Linux系统定时任务</h2><h3 id="1）-crontab-命令"><a href="#1）-crontab-命令" class="headerlink" title="1） crontab 命令"></a>1） crontab 命令</h3><pre><code>contab -e       // 创建定时任务* * * * * 命令  // 分、时、日、月、周（每过多长时间去执行，根据我们所设置的分、时、日、月、周）</code></pre><h3 id="2）-at-命令"><a href="#2）-at-命令" class="headerlink" title="2） at 命令"></a>2） at 命令</h3><p>一次性定时任务</p><p>语法：</p><pre><code># at [参数] [时间] at&gt; 执行的指令at&gt;Ctrl + D // 退出</code></pre><p>使用at 命令设定在5分钟后执行<code>hello.sh</code>脚本文件</p><pre><code>[root@www /]# at now + 5 minutesat&gt; /hello.shat&gt; &lt;EOT&gt;   # 在输入命令后 按 ctrl +ｄ　结束输入，并提示我们 此任务编号为7job 7 at 2017-07-08 19:15  [root@www /]#</code></pre><p>然后查看所有　at　任务，可以看到刚才添加的 7 号任务：</p><pre><code>[root@www /]# at -l5   2017-10-01 08:00 a root7   2017-07-08 19:15 a root6   2017-07-09 19:01 a root[root@www /]#</code></pre><h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><h3 id="1）-vi-vim-编辑器"><a href="#1）-vi-vim-编辑器" class="headerlink" title="1） vi/vim 编辑器"></a>1） vi/vim 编辑器</h3><p>① 模式</p><ul><li>一般模式、编辑模式和命令行模式；</li><li>一般模式：删除、复制和粘贴</li></ul><blockquote><ul><li>切换 编辑模式：i、I、a、A、o、O、r、R</li><li>切换 命令行模式：:、/、?<ul><li>【:w】：保存文件</li><li>【:w!】：若文件为只读，强制保存文件</li><li>【:q】：退出 vi</li><li>【:q!】：不保存，强制退出 vi</li><li>【:wq】：保存并退出</li><li>【:wq!】：强制保存，并退出</li><li>【:set nu】：显示行号</li><li>【:set nonu】：取消显示行号</li></ul></li></ul></blockquote><ul><li>Esc ：退出 编辑模式，回到 一般模式</li></ul><p>② 移动光标</p><ul><li>【Ctrl + F】 ：到下一页</li><li>【Ctrl + B】 ：到上一页</li><li>【[0] 或者功能键 [Home]】：光标移动到当前行的最前面</li><li>【[$] 或者功能键 [End]】：光标移动到当前行的末尾</li><li>【G】：光标移动到文件的最后一行（第一个字符处）</li><li>【gg】：光标移动到文件的第一行，相当于 “1G”</li><li>【N + [Enter]】：光标向下移动 n 行</li></ul><p>③ 查找和替换</p><ul><li>/word：在文件中查找内容为 word 的字符串（向下查找）</li><li>?word：在文件中查找内容为 word 的字符串（向上查找）</li><li>:n1, n2s/word1/word2/g：n1，n2 为数字，在第 n1 行到第 n2 行之间查找 &gt; word1，并将其替换成 word2</li><li>:1,$s/word1/word2/g：从第一行（第n行同理）到最后一行查找 word1 注册，并替换成 word2</li><li>:1,$s/word1/word2/gc：功能同上，只不过每次替换时都会让用户确认</li></ul><p>④ 删除、复制和粘贴</p><ul><li>【x】：向后删除一个字符，相当于<strong>【Delete】</strong></li><li>【X】：向前删除一个字符，相当于<strong>【Backspace】</strong></li><li>【dd】：删除光标所在的一整行</li><li>【ndd】：删除光标所在的向下 n 行</li><li>【yy】: 复制光标所在的那一行</li><li>【nyy】：复制光标所在的向下 n 行</li><li>【p】：为将已将复制的数据在光标下一行粘贴</li><li>【P】：为将已将复制的数据在光标上一行粘贴</li><li>【Ctrl + r】：多次撤销</li></ul><p>⑤ 视图模式（vim）</p><ul><li>【v】：将光标经过的地方反白选择</li><li>【V】：将光标经过的行反白选择</li><li>【Ctrl + v】：块选择，可用长方形的方式选择文本</li><li>【y】：将反白的地方复制到剪贴板</li><li>【d】：将反白的内容删除</li></ul><p>⑥ 配置</p><ul><li>【:set nu】：显示行号</li><li>【:set nonu】：取消显示行号</li></ul><h3 id="2）-shell-基础"><a href="#2）-shell-基础" class="headerlink" title="2） shell 基础"></a>2） shell 基础</h3><p>① 脚本执行方式      </p><pre><code>1）赋予权限，直接执行，例：chmod + x test.sh; ./test.sh2）调用解释其使得脚本执行，例：bash、csh、ash、bsh、ksh等等3）使用source命令，例：source test.sh</code></pre><p>② 编写基础</p><pre><code>1）开头用 #! 指定脚本解释器，例如：#!/bin/sh2）编写具体功能</code></pre><h2 id="真题"><a href="#真题" class="headerlink" title="真题"></a>真题</h2><p>如何实现每天0点钟重新启动服务器?</p><pre><code>crontab -e* * * * * reboot分 时 日 月 周 reboot0 0 * * * reboot</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Linux指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX的基本工作原理</title>
      <link href="/2020/07/10/ajex-basic-knowledge/"/>
      <url>/2020/07/10/ajex-basic-knowledge/</url>
      
        <content type="html"><![CDATA[<h2 id="AJAX的基本工作原理"><a href="#AJAX的基本工作原理" class="headerlink" title="AJAX的基本工作原理"></a>AJAX的基本工作原理</h2><h3 id="1）-AJAX基本概念"><a href="#1）-AJAX基本概念" class="headerlink" title="1） AJAX基本概念"></a>1） AJAX基本概念</h3><blockquote><p>Asynchronous JavaScript and XML（异步的 JavaScript和XML）。通过在后台与服务器进行少量数据交换，AJAX可以使网页实现异步更新。</p></blockquote><h3 id="2）-AJAX-工作原理"><a href="#2）-AJAX-工作原理" class="headerlink" title="2） AJAX 工作原理"></a>2） AJAX 工作原理</h3><blockquote><ul><li>XMLHttpRequest 是 AJAX的基础，在使用AJAX的时候，一定要去使用XMLHttpRequest这个对象，AJAX是基于该对象的；</li><li>XMLHttpRequest 用于在后台与服务器交换数据。</li></ul></blockquote><p>① XMLHttpRequest 对象请求</p><pre class="line-numbers language-JavaSript"><code class="language-JavaSript">// 请求方式，请求地址，是否异步传送open(method, url, async);// 发送send(string);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>② XMLHttpRequest 对象响应</p><pre class="line-numbers language-JavaSript"><code class="language-JavaSript">responseText; // 接收 text内容responseXML;  // 接收 XML内容onreadystatechange; // 状态发生改变的时候调用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>readState：</p><ul><li>0（请求未初始化）；</li><li>1（服务器连接已建立）；</li><li>2（请求已接收）；</li><li>3（请求处理中）；</li><li>4（请求已完成，且响应已就绪）【响应完成】</li></ul><p>status：200、400</p><h2 id="jQuery的AJAX操作"><a href="#jQuery的AJAX操作" class="headerlink" title="jQuery的AJAX操作"></a>jQuery的AJAX操作</h2><p>常用方法</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">$(ele).load(); // 给我们一个元素直接去加载内容     $.ajax();$.get();$.post();$.getJSON();$.getScript();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="真题"><a href="#真题" class="headerlink" title="真题"></a>真题</h2><p>要求写出jQuery中，可以处理AJAX的几种方法。</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">$.ajax();$.get();$.post();$.getJSON();$.getScript();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基本知识</title>
      <link href="/2020/07/09/javascript-basic-knowledge/"/>
      <url>/2020/07/09/javascript-basic-knowledge/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript-基本语法"><a href="#JavaScript-基本语法" class="headerlink" title="JavaScript 基本语法"></a>JavaScript 基本语法</h2><h3 id="1）-变量的定义"><a href="#1）-变量的定义" class="headerlink" title="1） 变量的定义"></a>1） 变量的定义</h3><blockquote><ul><li>变量必须以字母开头；</li><li>变量也能以 <code>$</code> 和 _ 符号开头；</li><li>变量名称对大小写敏感；</li><li>使用 var 关键字来声明变量；</li></ul></blockquote><p><strong>注意事项：</strong></p><blockquote><p>可以在一条语句中声明很多变量（如： var a=1, b=2, c=3…）；<br>未使用值来声明的变量，值是 <code>undefined</code>(如：var a; 代表先声明一个变量，但是没有给它赋值，那该变量的值就是 <code>undefined</code>）；<br>如果重新声明 JavaScript变量，该变量的值不会丢失（如：var a=1；var a; 这样 a 不会被丢失，还是1）。</p></blockquote><h3 id="2）-数据类型"><a href="#2）-数据类型" class="headerlink" title="2） 数据类型"></a>2） 数据类型</h3><blockquote><p>字符串、数字、布尔、数组、对象、Null、Undefined</p></blockquote><p>注：JavaScript变量 均为对象。当您声明一个变量时，就创建了一个新的对象。无论是哪种数据类型，都是以对象的形式存在的，在JavaScript中，一切皆对象。</p><h3 id="3）-创建对象"><a href="#3）-创建对象" class="headerlink" title="3） 创建对象"></a>3） 创建对象</h3><blockquote><ul><li>new Object()；</li><li>使用对象构造器；</li><li>使用 JSON对象。</li></ul></blockquote><h3 id="4）-函数"><a href="#4）-函数" class="headerlink" title="4） 函数"></a>4） 函数</h3><blockquote><ul><li>定义方法；</li><li>无默认值；</li><li>函数内部声明的变量（使用 var）是局部变量；</li><li>在函数外声明的变量是全局变量，所有脚本和函数都能访问它。</li></ul></blockquote><h3 id="5）-运算符"><a href="#5）-运算符" class="headerlink" title="5） 运算符"></a>5） 运算符</h3><blockquote><ul><li>号 可以用来 字符串的拼接</li></ul></blockquote><h3 id="6）-流程控制"><a href="#6）-流程控制" class="headerlink" title="6） 流程控制"></a>6） 流程控制</h3><blockquote><p>else if 必须分开写</p></blockquote><h3 id="7）JavaScript内置对象"><a href="#7）JavaScript内置对象" class="headerlink" title="7）JavaScript内置对象"></a>7）JavaScript内置对象</h3><p>① Number</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">// 定义方法1：【使用最多】var pi = 3.14;// 定义方法2var myNum = new Number(value);// 定义方法3var myNum = Number(value);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>② String</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">// 定义方法1var str = 'This is String'; // 可以使用单引号或者双引号来定义【在JS中，单双引号基本没有区别】// 定义方法2var str = new String(s);// 定义方法3var str = String(s);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>String 拥有一些 <a href="https://www.w3school.com.cn/jsref/jsref_obj_string.asp" target="_blank" rel="noopener">方法和属性</a>。</p><p>③ Boolean</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">// 定义方法1var bol = true;// 定义方法2var bol = new Boolean(value);// 定义方法3var bol = Boolean(value);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Boolean 拥有一些 <a href="https://www.w3school.com.cn/jsref/jsref_obj_boolean.asp" target="_blank" rel="noopener">方法和属性</a>。</p><p>④ Array</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">// 定义方法1var arr = new Array();// 定义方法2var arr = new Array(size); // 将数组的长度放进去// 定义方法3var arr = new Array(e1, e2, e3, ..., en); // 将数组的元素放进去<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：Array 拥有一些 <a href="https://www.w3school.com.cn/jsref/jsref_obj_array.asp" target="_blank" rel="noopener">方法和属性</a>。与PHP不同的是 JavaScript中的数组没有关联数组，即通常情况下，下标不允许为字符串。如果要定义像PHP那样的关联数组，要使用 JSON对象。</p><p>⑤ Date</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">var date = new Date();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Date 也拥有一些 <a href="https://www.w3school.com.cn/jsref/jsref_obj_date.asp" target="_blank" rel="noopener">方法和属性</a>。</p><p>常考：如何使用 JS 来获取当前客户端的时间？</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">var myDate = new Date();myDate.getYear();        //获取当前年份(2位)myDate.getFullYear();    //获取完整的年份(4位,1970-????)myDate.getMonth();       //获取当前月份(0-11,0代表1月)myDate.getDate();        //获取当前日(1-31)myDate.getDay();         //获取当前星期X(0-6,0代表星期天)myDate.getTime();        //获取当前时间(从1970.1.1开始的毫秒数)myDate.getHours();       //获取当前小时数(0-23)myDate.getMinutes();     //获取当前分钟数(0-59)myDate.getSeconds();     //获取当前秒数(0-59)myDate.getMilliseconds();    //获取当前毫秒数(0-999)myDate.toLocaleDateString();     //获取当前日期var mytime=myDate.toLocaleTimeString();     //获取当前时间myDate.toLocaleString( );        //获取日期与时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⑥ Math</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">var pi_value = Math.PI; // 不需要 new ，可以直接使用var sqrt_value = Math.sqrt(15); // 求平方根<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Math 也拥有一些 <a href="https://www.w3school.com.cn/jsref/jsref_obj_math.asp" target="_blank" rel="noopener">方法和属性</a>。</p><p>⑦ RegExp正则表达式【非常重要】</p><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">// 使用方法1/pattern/attributes; // 正则表达式，不需要加引号// 使用方法2new RegExp(pattern, attributes); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>RegExp 也拥有一些 <a href="https://www.w3school.com.cn/js/js_obj_regexp.asp" target="_blank" rel="noopener">方法和属性</a>，其中包含正则表达式的分割、查找、匹配、替换。</p><h3 id="8）-Window-对象"><a href="#8）-Window-对象" class="headerlink" title="8） Window 对象"></a>8） Window 对象</h3><ul><li><a href="https://www.w3school.com.cn/js/js_window.asp" target="_blank" rel="noopener">Window</a>【常考】</li><li><a href="https://www.w3school.com.cn/js/js_window_navigator.asp" target="_blank" rel="noopener">Navigator</a></li><li><a href="https://www.w3school.com.cn/js/js_window_screen.asp" target="_blank" rel="noopener">Screen</a></li><li><a href="https://www.w3school.com.cn/js/js_window_history.asp" target="_blank" rel="noopener">History</a>【常考】</li><li><a href="https://www.w3school.com.cn/js/js_window_location.asp" target="_blank" rel="noopener">Location</a>【常考】</li></ul><h3 id="9）-DOM-对象"><a href="#9）-DOM-对象" class="headerlink" title="9） DOM 对象"></a>9） DOM 对象</h3><ul><li><a href="https://www.w3school.com.cn/js/js_htmldom_document.asp" target="_blank" rel="noopener">Document 对象</a></li><li><a href="https://www.w3school.com.cn/js/js_htmldom_elements.asp" target="_blank" rel="noopener">Element  元素</a></li><li><a href="https://www.w3school.com.cn/js/js_htmldom_elements.asp" target="_blank" rel="noopener">Attr     属性</a></li><li><a href="https://www.w3school.com.cn/js/js_htmldom_events.asp" target="_blank" rel="noopener">Even     事件</a></li></ul><h3 id="10-jQuery基础知识"><a href="#10-jQuery基础知识" class="headerlink" title="10) jQuery基础知识"></a>10) jQuery基础知识</h3><p>① jQuery 选择器</p><ul><li>基本选择器</li><li>层次选择器</li><li>过滤选择器</li><li>可见性过滤选择器</li><li>属性过滤选择器</li><li>子元素过滤选择器</li><li>表单对象属性过滤选择器</li></ul><p>② jQuery 事件</p><pre class="line-numbers language-JavaSript"><code class="language-JavaSript">$("p").show();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>④ jQuery DOM 操作</p><pre class="line-numbers language-JavaSript"><code class="language-JavaSript">操作属性、值、节点、CSS、尺寸<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>牢记 以上基础知识点，比较常考察的是 JavaScript的HTML样式操作以及 jQuery的选择器 和 事件、样式操作。</p><h2 id="真题"><a href="#真题" class="headerlink" title="真题"></a>真题</h2><h3 id="1、JavaScript中为Id是test的元素，设置样式为good。"><a href="#1、JavaScript中为Id是test的元素，设置样式为good。" class="headerlink" title="1、JavaScript中为Id是test的元素，设置样式为good。"></a>1、JavaScript中为Id是test的元素，设置样式为good。</h3><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">document.getElementById('test').className = 'good';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、要求使用jQuery事件写在页面元素加载完成之后，动态绑定-click-事件到-btnOK-元素。"><a href="#2、要求使用jQuery事件写在页面元素加载完成之后，动态绑定-click-事件到-btnOK-元素。" class="headerlink" title="2、要求使用jQuery事件写在页面元素加载完成之后，动态绑定 click 事件到 btnOK 元素。"></a>2、要求使用jQuery事件写在页面元素加载完成之后，动态绑定 click 事件到 btnOK 元素。</h3><pre class="line-numbers language-JavaScript"><code class="language-JavaScript">$(function (){    $(".btnOK").click(function (){        // .....    });});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PHP面试题】您是否使用过版本控制软件？如果有，您用的版本控制软件的名字是什么？</title>
      <link href="/2020/07/09/source-control-and-php-fpm/"/>
      <url>/2020/07/09/source-control-and-php-fpm/</url>
      
        <content type="html"><![CDATA[<h2 id="一、考点"><a href="#一、考点" class="headerlink" title="一、考点"></a>一、考点</h2><h3 id="1、版本控制软件"><a href="#1、版本控制软件" class="headerlink" title="1、版本控制软件"></a>1、版本控制软件</h3><p>版本控制工具一共有两种：<strong>集中式</strong> 和 <strong>分布式</strong></p><blockquote><p>集中式：中间有一个中央的服务器，所有的客户机都会将我们的版本信息上传到中央服务器（即版本信息只保存在中央 服务器中），当我们去上传或者下载的时候，都是从中央服务器来进行连接的（即在此过程中，一旦中央服务器 挂掉，客户机可能就没有办法去上传和下载版本库中的内容），而且客户机是需要连接网络才可以完成上传和下载。【CVS和SVN】</p></blockquote><blockquote><p>分布式：没有中央服务器，一个版本控制器下的所有客户机都拥有一套完整的版本库信息。这一点与集中式不一样，集中式只是在中央服务器中存储版本库信息。因此，对于分布式来说，容灾性更好，而且不用去连接网络【Git】</p></blockquote><h3 id="2、-延伸"><a href="#2、-延伸" class="headerlink" title="2、 延伸"></a>2、 延伸</h3><h4 id="1）-PHP的运行原理"><a href="#1）-PHP的运行原理" class="headerlink" title="1） PHP的运行原理"></a>1） PHP的运行原理</h4><p>典型题：Nginx + PHP - FPM 的运行原理</p><blockquote><ul><li><strong>CGI</strong>:本身早期的一些 Web Server 只能处理简单的 HTML静态文件，但是随着技术的发展，出现了动态语言（如PHP，Python）。在这当中，如果我们要去处理 PHP 得交给PHP解析器来处理，但是PHP处理完毕后，又怎么跟我们的 Web Server 来进行通信呢？这是一个问题。为了解决不同的语言处理器 与 Web Server 的通信，出现了 <strong>CGI协议</strong>，只要按照 <strong>CGI协议</strong> 去编写程序，就能够实现语言解析器 与 Web Server 的通信。（如：PHP的CGI程序) 在此过程中，<strong>CGI就是PHP解析器 和 Web Server 当中的一个协议桥梁</strong>。</li></ul></blockquote><blockquote><ul><li><strong>FastCGI</strong>：CGI虽然解决了PHP与 Web Server 通信的问题，但是它的效率很低，因为 Web Server 每收到一个请求，都会新开一个 CGI进程，然后请求结束的时候，再终止掉这个进程，这个时候如果说我们有一万个，或者十万个，或者一百万个这样的请求，我们就会新开十万，一百万这样的进程，然后再去终止掉，本身来说，非常浪费我们的资源。此时 FastCGI 就出现了，它主要是 <strong>以 CGI的改良版本出现</strong>，每次处理完请求之后，不会终止掉这个进程，而是保留这个进程，使这个进程可以一次处理多个请求，这样的话，每次就不用重新开一个进程了，大大提升了我们的效率。</li></ul></blockquote><blockquote><ul><li><strong>PHP-FPM</strong> ： （<strong>FastCGI Process Manager : FastCGI的进程管理器</strong>） , FPM是 FastCGI的一个实现，并且提供了进程管理的功能。进程 包括 <strong>master进程</strong> 和 <strong>worker进程</strong> 两种进程， master进程 只有一个，负责监听端口，接收来自 Web Server的请求；而 Worker进程 则一般会有多个，具体的数量会在 FPM的配置中进行定义，每个进程的内部都会嵌入一个PHP解析器（那就是PHP代码真正执行的地方），也就是说，worker 来进行处理 PHP代码，而 master 主要是监听端口，跟 Web Server 来进行接收请求。本身来说，master监听端口默认情况下是 9000，通过** Nginx的反向代理**去代理 9000端口，所以在这儿我们可以完成 FPM的相关处理。</li></ul></blockquote><h4 id="2）-PHP的常见配置项"><a href="#2）-PHP的常见配置项" class="headerlink" title="2） PHP的常见配置项"></a>2） PHP的常见配置项</h4><ul><li>register_globals ：注入变量（当我们把此项开启的时候， 各种变量都会被注入代码，例如来自HTML表单的请求变量，再加上PHP在使用变量之前是无需进行初始化的，使得更容易出现写出不安全的代码，当打开的时候，无法知道变量是从哪里来的 ）【不建议打开】</li><li>allow_url_fopen ：是否允许打开远程文件</li><li>allow_url_include ：允许远程包含文件</li><li>date.timezone ：设置时区</li><li>display_errors ：是否显示错误【在开发环境下开启此项，在生产环境下一定要关闭】</li><li>error_reporting ：显示错误级别设置【建议一直关闭掉】</li><li>safe_mode ：是否开启安全模式</li><li>upload_max_filesize ：上传的最大的文件大小是多少</li><li>max_file_uploads ：上传的最大文件数量是多少</li><li>post_max_size：提交的post数据的最大大小是多大</li></ul><h2 id="二、解题方法"><a href="#二、解题方法" class="headerlink" title="二、解题方法"></a>二、解题方法</h2><blockquote><p>理解并牢记以上知识点并理解PHP运行原理</p></blockquote><h2 id="三、真题"><a href="#三、真题" class="headerlink" title="三、真题"></a>三、真题</h2><h3 id="请简述CGI、FastCGI-和-PHP-FPM-的区别。"><a href="#请简述CGI、FastCGI-和-PHP-FPM-的区别。" class="headerlink" title="请简述CGI、FastCGI 和 PHP-FPM 的区别。"></a>请简述CGI、FastCGI 和 PHP-FPM 的区别。</h3><pre><code>CGI : 为了联系 Web Server 跟PHP解析器中的一个协议，它起一个桥梁的作用。FastCGI : 是 CGI的改良版本。PHP-FPM : FastCGI Process Manager，FastCGI进程管理器。</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP面试 </tag>
            
            <tag> php-fpm </tag>
            
            <tag> 版本控制软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PHP面试题】HTTP/1.1中，状态码 200 301 304 403 404 500 的含义。</title>
      <link href="/2020/07/08/http/"/>
      <url>/2020/07/08/http/</url>
      
        <content type="html"><![CDATA[<h2 id="一、考点"><a href="#一、考点" class="headerlink" title="一、考点"></a>一、考点</h2><h3 id="1、HTTP协议状态码"><a href="#1、HTTP协议状态码" class="headerlink" title="1、HTTP协议状态码"></a>1、HTTP协议状态码</h3><h4 id="①-状态码的作用："><a href="#①-状态码的作用：" class="headerlink" title="① 状态码的作用："></a>① 状态码的作用：</h4><blockquote><p>HTTP状态码本身负责客户端HTTP请求返回的结果，标记服务器端的处理是否正常，通知出现的一些错误等等工作。状态码的职责是当我们的客户端向我们的服务器端发送请求的时候，描述返回的结果，使得用户可以知道服务器端是否处理了请求。</p></blockquote><h4 id="②-五类响应：1XX、2XX、3XX、4XX、5XX"><a href="#②-五类响应：1XX、2XX、3XX、4XX、5XX" class="headerlink" title="② 五类响应：1XX、2XX、3XX、4XX、5XX"></a>② 五类响应：1XX、2XX、3XX、4XX、5XX</h4><blockquote><ul><li>1XX : （Informational）信息类状态码（表示接收请求状态处理）</li><li>2XX : （Success）成功状态码（表示请求正常处理完毕）</li><li>3XX : （Redirection）重定向（表示需要进行附加操作，已完成请求）</li><li>4XX : （Client Error）客户端错误（表示服务器无法处理请求）</li><li>5XX : （Server Error）服务器错误状态码（表示服务器处理请求的时候出错）</li></ul></blockquote><h4 id="③-常见状态码："><a href="#③-常见状态码：" class="headerlink" title="③ 常见状态码："></a>③ 常见状态码：</h4><blockquote><ul><li>200(OK) : 从状态码发出的请求被服务器正常处理。</li><li>204(No Content) : 服务器接收的请求已成功处理，但在返回的响应报文中不含实体的主体部分【即没有内容】。</li><li>206(Partial Content) : 部分的内容（如：客户端进行了范围请求，但是服务器成功执行了这部分的干请求）。</li><li>301(Moved Permanently) : 跳转，代表永久性重定向（请求的资源已被分配了新的URI，以后已使用资源，现在设置了URI）。</li><li>302(Found) : 临时性重定向（请求的资源已经分配了新的URI，希望用户本次能够使用新的URI来进行访问）。</li><li>303(See Other) : 由于请求对应的资源存在的另一个URI（因使用get方法，定向获取请求的资源）。</li><li>304(Not Modified) : 客户端发送附带条件的请求时，服务器端允许请求访问资源，但因发生请求未满足条件的情况后，直接返回了 304。</li><li>307(Temporary Redirect) : 临时重定向【该状态码与302有着相同的含义】。</li><li>400(Bad Request) : 请求报文中存在语法错误（当错误方式时，需修改请求的内容后，再次发送请求）。</li><li>401(Unauthorized) : 发送的请求需要有通过HTTP认证的认证信息。</li><li>403(Forbidden) : 对请求资源的访问被服务器拒绝了。</li><li>404(Not Found) : 服务器上无法找到请求的资源。</li><li>500(Internal Server Error) : 服务器端在执行请求时发生了错误。</li><li>503(Service Unavailable) : 服务器暂时处于超负载或者是正在进行停机维护，现在无法处理请求。</li></ul></blockquote><h3 id="2、延伸"><a href="#2、延伸" class="headerlink" title="2、延伸"></a>2、延伸</h3><h4 id="1）-OSI-七层模型"><a href="#1）-OSI-七层模型" class="headerlink" title="1） OSI 七层模型"></a>1） OSI 七层模型</h4><p>OSI（Open System Interconnect），即开放式系统互联。</p><blockquote><p>物理层、数据链路成、网络层、传输层、会话层、表示层、应用层。</p></blockquote><p><strong>第一层： 物理层</strong></p><blockquote><p>作用：建立、维护、断开物理连接。</p></blockquote><p><strong>第二层： 数据链路层</strong></p><blockquote><p>作用：建立逻辑连接、进行硬件地址寻址、差错校验等功能。</p></blockquote><p><strong>第三层： 网络层</strong></p><blockquote><p>作用：进行逻辑地址寻址，实现不同网络之间的路径选择。</p></blockquote><p><strong>第四层： 传输层</strong></p><blockquote><p>作用：定义传输数据的协议端口号，以及流控和差错校验。</p></blockquote><p>协议有：TCP、UDP，数据包一旦离开网卡即进入网络传输层。</p><p><strong>第五层： 会话层</strong></p><blockquote><p>作用：建立、管理、终止会话。</p></blockquote><p><strong>第六层： 表示层</strong></p><blockquote><p>作用：数据的表示、安全、压缩。</p></blockquote><p><strong>第七层： 应用层</strong></p><blockquote><p>作用：网络服务于最终用户的一个接口。</p></blockquote><p>协议有：HTTP、FTP、TFTP、SMTP、SNMP、DNS、TELNET、HTTPS、POP3、DHCP等。</p><h4 id="2）-HTTP协议的工作特点和工作原理"><a href="#2）-HTTP协议的工作特点和工作原理" class="headerlink" title="2） HTTP协议的工作特点和工作原理"></a>2） HTTP协议的工作特点和工作原理</h4><p>① 工作特点：</p><blockquote><ul><li>基于 B/S 模式；</li><li>通信开销小、简单快速、传输成本低；</li><li>使用灵活、可使用超文本传输协议；</li><li>节省传输时间；</li><li>无状态。</li></ul></blockquote><p>② 工作原理：</p><blockquote><p>客户端发送请求给服务器，创建一个TCP连接，指定端口号，默认80， 连接到服务器，服务器监听浏览器请求，一旦监听到客户端请求，分析请求类型后，服务器会向客户端返回状态信息和数据内容。</p></blockquote><h4 id="3）-HTTP协议常见请求-响应头和请求方法"><a href="#3）-HTTP协议常见请求-响应头和请求方法" class="headerlink" title="3） HTTP协议常见请求/响应头和请求方法"></a>3） HTTP协议常见请求/响应头和请求方法</h4><p>① HTTP协议常见请求/响应头</p><pre><code>Content-Type;                // 请求到与实体对于的MIME信息Accept;                      // 指定客户端能接受的内容类型Origin;                      // 最初的请求来源于哪【主要用于POST请求】Cookie;                      // HTTP请求发起时，发送给服务端的 cookie的值Cache-Control;               // 指定请求和响应的缓存机制User-Agent;                  // 用户信息Referrer;                    // 上级请求路径X-Forwarded-For;             // 请求端真实的IP 【做代理的时候，可以用该项来进行获取】Access-Control-Allow-Origin; // 允许特定的域名来进行访问【通常情况下来做(跨域)使用】Last-Modified;               // 请求资源的最后响应时间</code></pre><p>② HTTP协议的请求方法</p><blockquote><ul><li>GET ： 会显示请求指定的资源（主要用于【数据的读取】，GET方法是幂等方法）【幂等：每次GET拿到的数据都是一样的】。【查】</li><li>POST ：会向指定资源提交数据，请求服务器进行处理（请求可能会创建新的资源和修改现有的资源）【非幂等资源：POST每次在提交的时候，根据数据的不同，会创建不同的数据】，POST是非幂等方法，【通常情况下，创建用 POST方法，遵循的是 RESTful API 的规则】。【增】</li><li>HEAD ： 与 GET方法 一样，都是向服务器发送指定资源的请求，但是服务器在响应 HEAD请求 时，不会回传资源的内容部分，只会回传 HEAD信息（即头信息）。</li><li>OPTIONS ： 与 HEAD方式 类似，一般也是用于客户端查看服务器的性能（该方法会请求服务器，返回该资源支持的所有 HTTP请求方法，该方法会用 * 来代替资源名称，向服务器发送 OPTIONS请求）【可以测试服务器功能是否正常】</li><li>PUT ： 会向指定资源位置上上传最新的内容，PUT方法是幂等的方法， 通过该方法客户端可以将 指定资源的最新数据 传送给服务器 取代指定资源的内容，【通常情况下，修改用PUT方法，遵循的是RESTful API 规则】。【改】</li><li>DELETE ：请求服务器删除所请求的URI所标识的资源，DELETE请求后指定资源会被删除，DELETE方法是幂等的方法。【删】</li><li>TRACE ： 请求服务器回显其收到的请求信息，该方法主要用于HTTP请求的测试或者诊断。</li></ul></blockquote><p>③ 常考点：HTTP协议的GET和POST请求方法的区别</p><blockquote><ul><li>在做后退按钮和刷新的时候，get是没有太大变化的；但是post数据就会被重新提交；</li><li>get可以收藏为书签；post不可能被收藏为书签；</li><li>get请求可以被浏览器缓存；post不可以被缓存；</li><li>get请求的时候，编码类型是application/x-www-form-urlencoded；post请求的时候，除了get的编码类型，编码类型还可以是multipart/form-data为二进制数据使用多重编码，该变量类型在做上传的时候使用；</li><li>get在历史记录中，参数会保留在浏览器历史记录中；post参数不会存于浏览器的历史记录中；</li><li>对于数据的长度限制，在get中是有长度的限制的，当发送数据的时候，get方法会向URL添加数据，URL的长度是受限制的，最大限制是2048个字符；</li><li>post是没有限制的；</li><li>对于数据类型的限制，get只允许GB2312；post是没有限制的，也允许二进制的数据；</li><li>对于安全性，get安全性比较差，所发送的数据是URL的一部分，在发送密码或者是其他敏感信息的时候，绝对不能使用get；post安全性比较高，因为 参数不会被保存在浏览器历史记录 或者是 web服务器日志 中；</li><li>对于可见性，get请求数据在URL中对所有人都是可见的；post请求的数据不会显示在URL中。</li></ul></blockquote><h4 id="4）-HTTPS协议的工作原理"><a href="#4）-HTTPS协议的工作原理" class="headerlink" title="4） HTTPS协议的工作原理"></a>4） HTTPS协议的工作原理</h4><blockquote><p>HTTPS是一种基于SSL/TLS的HTTP协议，所有的HTTP数据都是在SSL/TLS协议封装之上传输的。<br>HTTPS协议在HTTP协议的基础上，添加了SSL/TLS握手以及数据加密传输，也属于应用层协议。</p></blockquote><h4 id="5）-常见网络协议含义及端口"><a href="#5）-常见网络协议含义及端口" class="headerlink" title="5） 常见网络协议含义及端口"></a>5） 常见网络协议含义及端口</h4><blockquote><ul><li>FTP : 文件传输协议，用来下载文件，上传主页【默认端口：21】</li><li>Telnet : 一种用于远程登录的端口，用户可以以自己的身份远程连接到计算机上，通过这种端口，可以提供一种基于DOS模式下的通信服务【端口：23】</li><li>SMTP : 定义了简单邮件传输协议，现在很多邮件服务器都用该协议，用于发送邮件【端口：25】</li><li>POP3 : 接收邮件协议 ，与 SMTP对应【默认端口：110】</li><li>HTTP : 超文本传输协议【端口：80】</li><li>DNS : 用于域名解析服务，该服务在 WINDOWS NT系统中使用最多【默认端口：53】</li></ul></blockquote><h2 id="二、解题方法"><a href="#二、解题方法" class="headerlink" title="二、解题方法"></a>二、解题方法</h2><blockquote><p>理解并牢记以上知识点。</p></blockquote><h2 id="三、真题"><a href="#三、真题" class="headerlink" title="三、真题"></a>三、真题</h2><p>我们常见的HTTP协议、TCP协议分别位于OSI网络模型的第几层？</p><blockquote><ul><li>HTTP协议：第七层【应用层】。</li><li>TCP协议：第四层【传输层】。</li></ul></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP面试 </tag>
            
            <tag> PHP基础 </tag>
            
            <tag> HTTP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PHP面试题】PHP的类权限控制修饰符</title>
      <link href="/2020/07/08/php-object-class/"/>
      <url>/2020/07/08/php-object-class/</url>
      
        <content type="html"><![CDATA[<h2 id="一、考点"><a href="#一、考点" class="headerlink" title="一、考点"></a>一、考点</h2><h3 id="1、PHP的类权限控制修饰符"><a href="#1、PHP的类权限控制修饰符" class="headerlink" title="1、PHP的类权限控制修饰符"></a>1、PHP的类权限控制修饰符</h3><table><thead><tr><th align="left"></th><th align="center">类外</th><th align="center">子类</th><th align="center">类内</th></tr></thead><tbody><tr><td align="left">public（公共的）</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="left">protected（受保护的）</td><td align="center">×</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="left">private（私有的）</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr></tbody></table><h3 id="2、延伸"><a href="#2、延伸" class="headerlink" title="2、延伸"></a>2、延伸</h3><h4 id="1）-面向对象的封装、继承和多态"><a href="#1）-面向对象的封装、继承和多态" class="headerlink" title="1） 面向对象的封装、继承和多态"></a>1） 面向对象的封装、继承和多态</h4><p>① 封装</p><blockquote><p>成员访问权限（即 public/protected/private的访问权限问题）；<br>② 继承</p><ul><li>单一继承的特性（只能同时继承一个父类，如果有接口的话，可以继承一个父类，一个接口）；</li><li>方法重写（在父类中定义一个方法，子类去继承父类的时候，如果方法名相同，父类的方法会被子类覆盖掉，如果不想被覆盖，可以进行延伸，加一个 parent::方法名()）；</li></ul></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 子类的方法体 ....</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③ 多态</p><ul><li>抽象类的定义<blockquote><p>在类的前面加 abstract；</p></blockquote></li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">abstract</span> <span class="token keyword">class</span> 类名<span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果类中有抽象方法，该类必须定义为抽象类；如果类中没有抽象方法，也可以定义为抽象类。</p></blockquote><ul><li>接口的定义<blockquote><ul><li>接口中的方法都为 抽象方法；</li><li>用 interface 接口名 来定义；</li></ul></blockquote></li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">interface</span> 接口名<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> 方法名<span class="token punctuation">(</span><span class="token punctuation">[</span>参数<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>没有方法体，直接用 {} 即可（即定义好该方法，等着后代去实现）。</p></blockquote><h4 id="2）-魔术方法"><a href="#2）-魔术方法" class="headerlink" title="2） 魔术方法"></a>2） 魔术方法</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 构造方法：在每次创建对象（即实例化对象的时候自动调用）</span><span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 析构方法：在每次销毁的时候自动调用</span><span class="token function">__call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 在对象中调用一个不可访问方法时，会被调用</span><span class="token function">__callStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在静态上下文中调用一个不可访问方法时，会被调用</span><span class="token function">__get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 读取不可访问属性的值时，会被调用</span><span class="token function">__set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 在给不可访问属性赋值时，会被调用</span><span class="token function">__isset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 当对不可访问属性调用 isset()或empty()时，会被调用</span><span class="token function">__unset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 当对不可访问属性调用 unset()时，会被调用</span><span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 常用于未提交的数据，或类似的清理操作。同时如果有一些很大的对象，但不需要全部保存，这个功能就很好用。</span><span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。</span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用于一个类被当成字符串时应怎样回应。（此方法必须返回一个字符串）</span><span class="token function">__clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 当赋值完成时，如果定义了__clone()方法，则新创建的对象（复制生成的对象）中的__clone()方法会被调用【可用于修改属性的值（如果有必要的话）。】</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3）-设计模式"><a href="#3）-设计模式" class="headerlink" title="3） 设计模式"></a>3） 设计模式</h4><p>常见设计模式：</p><ol><li>工厂模式</li><li>单例模式</li><li>注册数模式</li><li>适配器模式</li><li>观察者模式</li><li>策略模式</li></ol><h2 id="二、解题方法"><a href="#二、解题方法" class="headerlink" title="二、解题方法"></a>二、解题方法</h2><blockquote><p>1、着重记忆PHP面向对象的基本语法，记忆模式方法；<br>2、理解常见设计模式</p></blockquote><h2 id="三、真题"><a href="#三、真题" class="headerlink" title="三、真题"></a>三、真题</h2><h3 id="请写出PHP的构造函数和析构函数"><a href="#请写出PHP的构造函数和析构函数" class="headerlink" title="请写出PHP的构造函数和析构函数"></a>请写出PHP的构造函数和析构函数</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 构造函数</span><span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 析构方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注：如果 <code>方法名</code>和 <code>类名</code> 一致，该方法也是构造函数。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP面试 </tag>
            
            <tag> PHP基础 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PHP面试题】简述 cookie 和 session的区别及各自的工作机制，存储位置等，简述 cookie 的优缺点。</title>
      <link href="/2020/07/08/session-cookie/"/>
      <url>/2020/07/08/session-cookie/</url>
      
        <content type="html"><![CDATA[<h2 id="一、考点"><a href="#一、考点" class="headerlink" title="一、考点"></a>一、考点</h2><h3 id="1、PHP的会话控制技术"><a href="#1、PHP的会话控制技术" class="headerlink" title="1、PHP的会话控制技术"></a>1、PHP的会话控制技术</h3><h4 id="1）-为什么要使用会话控制技术？"><a href="#1）-为什么要使用会话控制技术？" class="headerlink" title="1） 为什么要使用会话控制技术？"></a>1） 为什么要使用会话控制技术？</h4><blockquote><ul><li>本身我们的Web是通过 HTTP协议来实现的，而HTTP协议是无状态协议（即HTTP协议没有一个内件机制来维护两个事物之间的状态），所以同一个用户在请求相同的页面两次的时候，HTTP协议不会认为这两次请求都来自于同一个用户，会把它们当做是两次请求的独立（即会将两次请求隔离开），会认为是两个不同的用户请求的。如果用户执行了登录操作，再次请求页面，HTTP协议不会认为该用户之前登录过，因为它无法保持该用户之前的登录状态，所以无法在不同页面之间进行用户的跟踪和状态的保持。</li><li>而对于我们的会话控制技术来说，就是为了解决这样的问题。所以会话控制技术的思想是：允许服务器跟踪同一个客户端做出的连续请求。（即之前做过登录，下一次再进行请求的时候，就会知道之前已经登录过，不需要再登录，这一可以保持用户的状态，从而完成登录状态的保持。）</li></ul></blockquote><h4 id="2）-会话控制技术的实现方式"><a href="#2）-会话控制技术的实现方式" class="headerlink" title="2） 会话控制技术的实现方式"></a>2） 会话控制技术的实现方式</h4><p>① 通过 GET 参数传递</p><blockquote><p>如：在 页面一 中做了一个登录，用户的登录信息已经存在，跳到 页面二 中的时候，继续把刚才的登录信息传到 页面二 中，这个时候服务端在进行处理的时候，就会发现该用户刚刚在 页面一 中已经登录过了。这种方式可以通过GET参数进行传递，但是这样会有一些问题。</p></blockquote><p>通过GET参数传递可能存在的问题：</p><blockquote><ul><li>信息不安全，都暴露在了URL地址栏中； </li><li>在传递的过程中，可能会出现参数丢失的现象，这样登录信息也会被丢失。</li></ul></blockquote><p>因此，通过GET方式传递这种方法不推荐使用</p><p>② Cookie<br><strong>工作原理</strong></p><blockquote><p>cookie的工作原理：是一种由服务器发送给客户端的片段信息，存储在客户端浏览器的内存或硬盘当中。【可以把它当做是存储在浏览器中的一个文件，这个文件中包含我们客户端的一些片段的信息（如：登录或存储的一些其他信息等），它就是一个文件，这个文件是<strong>存储在客户端的！！！</strong>】</p></blockquote><p><strong>举例说明</strong></p><blockquote><p>用户去超市购买东西，购买完之后办理了会员卡，这个过程中：</p><ul><li>超市 可以理解成是 服务器，</li><li>用户 可以理解成是 客户端，</li><li>会员卡 可以理解成时 Cookie。</li></ul></blockquote><p>即存储在客户端中的文件，就是会员卡，这张会员卡中存储着用户的基本信息，这些基本信息就是用户的状态信息。（如：我们做登录，就可以把登录的状态保存在 cookie的文件里）</p><p><strong>Cookie 的操作</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">/*  * 写操作 * $name     键名 * $value    值 * $expire    过期时间 * $path    有效的服务器路径 * $domain  有效的域名/子域名 * $secure  设置该cookie是否仅通过安全的HTTPS连接传给客户端 */</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$expire</span><span class="token punctuation">,</span> <span class="token variable">$path</span><span class="token punctuation">,</span> <span class="token variable">$domian</span><span class="token punctuation">,</span> <span class="token variable">$secure</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 读取 cookie</span><span class="token variable">$_COOKIE</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置 cookie</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'a[b]'</span><span class="token punctuation">,</span> <span class="token string">'val'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除 cookie</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此处减去多少都可以，只要保证cookie过期，就表示已经删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Cookie 的优点和缺点<ul><li><strong>cookie的优点：</strong>因为cookie是将信息存储在客户端，因此不会占用服务器的资源（即不会浪费服务器的资源），效率会高一些。</li><li><strong>cookie的缺点：</strong>也是因为其存储在客户端，由于我们的信息全部保存在客户端计算机中，所以不建议将一些敏感重要的数据保存到cookie当中，而且用户有权限禁止cookie的使用。如果我们在浏览器中，将cookie禁止掉，一旦用户禁止cookie，我们没有办法去保存用户的信息。</li></ul></li></ul><p>③ Session</p><blockquote><p>session的工作原理：将使用者相同的资料存储在服务器中，这样用户无法禁用session的使用。</p></blockquote><p>注：session 并不是完全脱离 cookie的，而是基于 cookie的。</p><p><strong>举例说明</strong></p><blockquote><p>用户去超市购买东西，购买之后超市给用户办了会员卡，会员卡是一个电子卡，只要输入用户的身份证号就可以使用该会员卡进行打折优惠。在此过程中：</p><ul><li>超市 -&gt; 服务器</li><li>用户 -&gt; 客户端</li><li>会员卡 -&gt; 由于没有实质的会员卡，我们拿到的是一个电子卡，会员卡信息是用户状态的信息，该信息是 存储在服务器的</li></ul></blockquote><blockquote><p>与cookie不同的是，电子卡是由服务器端进行保存的，是由超市进行保存的。用户每次来购物，只需要报自己的身份证号就可以了，该身份证号，叫 sessionId，而这个 sessionId 是存储在 cookie 中的。如果 cookie 被禁用，可以通过 URL 来传递 sessionId 的形式保存 session的状态。</p></blockquote><blockquote><p>因此 session 是基于 cookie 的，session 的信息都存储在服务器中的一个文件中，不存储于客户端文件中。每当用户想去读取 session 的内容时，首先会去拿到浏览器中携带 sessionId 的 cookie， 我们根据这个 sessionId 找到对应的 session 文件，将里面的内容读取出来。</p></blockquote><ul><li><strong>Session 的操作</strong></li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 开启 session</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用 session</span><span class="token variable">$_SESSION</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 销毁 session【将session中的内容情况】</span><span class="token variable">$_SESSION</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 或者 $_SESSION = null;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'views'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'views'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 删除 session 文件, 彻底销毁 session</span><span class="token function">session_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除 session文件，且将 sessionId 对应的 cookie文件一并删除掉</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Session 的配置</strong><pre><code>在 php.ini 中有一些关于 session 的配置：1) session.auto_start      // 自动开启 session2) session.cookie_domian  // 存储 sessionId 的那个 cookie 的有效域名3) session.cookie_lifetime4) session.cookie_path5) session.name  // 默认PHPSESSID6) session.save_path       // session 文件在服务器中的存储路径7) session.use_cookies    // 是否使用 cookie 来传递 sessionId8) session.use_trans_sid  // 是否可以使用传递的方式来传递 sessionId9) session.save_handler   // session 存储的句柄是什么【可以将 session存储到 memcache/redis/mysql，可以在此处进行配置】</code></pre></li></ul><p>在 php.ini 中，还有关于 session 的三项配置，是用来配合使用，来进行垃圾回收的。</p><pre><code>session.gc_probability; session.gc_divisor;session.gc_maxlifetime;</code></pre><blockquote><p>如果用户直接关闭了浏览器，而不退出，会永久的保持在服务器中，这个时候，就需要去配置垃圾回收，会把一些 session 文件给清除掉，定时去清除。去配置我们的配置：</p></blockquote><pre><code>session.gc_probability = 1session.gc_divisor = 100session.gc_maxlifetime = 1440</code></pre><p><strong>表示如果超过 过期时间（maxlifetime 最大生命周期）1440 秒，则 每 100 次 清理 1次。</strong></p><blockquote><p>原理：<br>每 100次去调用 session_start()的时候，会有一次去清理文件，清理的是 当前时间的时间戳 - 文件最后的修改时间 &gt; 1440s 的，说明该文件就已经过期，我们就将其清除掉。（如果将 session.gc_divisor = 1，每次去调用 session_start() 时，都会去清理一遍文件，清理一遍所有过期的 session文件）【此处不推荐将 session.gc_divisor 的值配置的特别小，如果配置的特别小，当去执行 session_start() 的时候，就会去消耗我们服务器的资源，会降低我们的效率】</p></blockquote><ul><li><p>Session 优点和缺点</p><blockquote><ul><li>session的优点：信息非常的安全，都是存储在服务器端的，客户端不可能拿到 session 的数据。</li><li>session的缺点：会占用服务器的资源（session文件越来越多，可能某一天会占满磁盘），并且它的分布式也是一个问题（如：将来我们可能会有多台 web服务器，但是 session 可能是存储在其中一台，而另外一台是没有办法去使用的。这种情况下，我们可以使用 redis，不管在哪台服务器，都可以去调用 redis 的服务器，就可以达到信息共享)。</li></ul></blockquote></li><li><p>传递 SessionID 的问题【重点】</p><blockquote><p>由于 session 是基于 cookie的，cookie 中存储了 sessionId，如果我们把 cookie 禁用掉，也就意外着我们的 sessionId 无法进行传递，即没有办法找到保持 session文件 的一个状态。</p></blockquote><pre class="line-numbers language-HTML"><code class="language-HTML">&#60a href="1.php"&#62下个页面&#60/a&#62<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>让该标签跳转到 1.php 页面，默认情况下，跳转到下一个页面，sessionId 存储在 cookie中，到下一个页面的时候，可以从 cookie 中拿到 sessionId，然后去找 session 文件，将我们的登录信息读取出来。但如果把 cookie 禁用掉，此时 sessionId 无法取出，也即 session的信息也无法取出。</p></blockquote></li></ul><p>解决方法：</p><pre class="line-numbers language-HTML"><code class="language-HTML">// 只要用该方法进行传递，哪怕没有 sessionId，到下一个页面的时候，也会去服务器中找以 sessionId的值 为文件名 的文件，并将里面的信息读取出来// 此处不可以用 PHPSESSION=sessionId的值这样的形式来写【错误写法】&#60a href="1.php?PHPSESSION=sessionId的值"&#62下个页面&#60/a&#62// 正确写法1&#60a href="1.php?&#60?php echo session_name().'='.session_id(); ?&#62  "&#62 下个页面&#60/a&#62   // 正确写法2&#60a href="1.php?&#60?php echo SID; ?&#62"&#62下个页面&#60/a&#62 // 常量 SID 就是 session_name() 和 session_id 的拼接。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SID 的特性：</p><blockquote><ul><li>如果开启了 cookie，SID为空；</li><li>如果未开启 cookie（cookie被禁用掉了），此时 SID才是 session_name() 和 session_id()字符串的拼接。</li></ul></blockquote><blockquote><p>注：如果大家进行分析过，就不容易发现，sessionId的值 就是 session文件的名称，文件的默认名称为：sess_sessionid的值。</p></blockquote><ul><li>Session存储</li></ul><p>出现的问题</p><blockquote><p>假设有5台 web服务器，有其中一台存储了 session，在登录的是否访问了5台中的一台，即登录的信息存储在了5台中的第一台服务器中，但是当跳转到下一个页面时，有可能就被轮询到了第二台服务器中，在第二台服务器上，我们去寻找 sessionId对于的那个 session文件的时候，无法找到。因为 session文件是在第一台服务器中存储着。</p></blockquote><p>解决方法：</p><blockquote><p>建议不要将 session以文件的形式进行存储，可以存储到我们的内存服务器中（如：memcache/redis/mysql）。<br>通过session_set_save_handler()存入 MySQL、Memcache、Redis等。</p></blockquote><h2 id="二、解题方法"><a href="#二、解题方法" class="headerlink" title="二、解题方法"></a>二、解题方法</h2><p>充分理解 Session 和 Cookie 的工作原理</p><h2 id="三、真题"><a href="#三、真题" class="headerlink" title="三、真题"></a>三、真题</h2><h3 id="Session信息的存储方式，如何进行遍历？"><a href="#Session信息的存储方式，如何进行遍历？" class="headerlink" title="Session信息的存储方式，如何进行遍历？"></a>Session信息的存储方式，如何进行遍历？</h3><p>存储方式：默认情况下存储到服务器的文件中，还可以通过 session_set_save_handler()存储到Mysql/Memcache/redis<br>遍历方式:</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$_SESSION</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP面试 </tag>
            
            <tag> PHP基础 </tag>
            
            <tag> Session </tag>
            
            <tag> Cookie </tag>
            
            <tag> 会话控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PHP面试题】不断在文件 hello.txt 头部写入一行 &quot;Hello World&quot; 字符串，要求代码完整。</title>
      <link href="/2020/07/08/file-system/"/>
      <url>/2020/07/08/file-system/</url>
      
        <content type="html"><![CDATA[<h2 id="一、考点"><a href="#一、考点" class="headerlink" title="一、考点"></a>一、考点</h2><h3 id="1、文件读取-写入操作"><a href="#1、文件读取-写入操作" class="headerlink" title="1、文件读取/写入操作"></a>1、文件读取/写入操作</h3><p><a href="https://www.php.net/manual/zh/book.filesystem.php" target="_blank" rel="noopener">文件系统相关函数</a></p><h4 id="1）-文件打开"><a href="#1）-文件打开" class="headerlink" title="1） 文件打开"></a>1） 文件打开</h4><blockquote><p>fopen()函数：用来打开一个文件，打开时需要指定打开模式</p></blockquote><p><strong>打开模式：</strong></p><pre><code>r :  只读方式打开，并且将文件指针指向文件的开头r+ ：读写方式打开，并且将文件指针指向文件的开头w ：写入方式打开，将文件指针指向文件的开头，且将文件的大小清空为0w+ : 读写模式【如果文件不存在，会自动创建一个】a : 追加的写入方式，会将文件的指针指向文件的末尾【如果文件不存在，也是会创建一个】a+ : 读写方式，即读写的追加，将文件指针指向文件末尾【如果文件不存在，也是会创建】x : 在创建的时候，以写入的方式进行打开，并且会将文件的指针指向文件的开头【如果文件已经存在，会报一个 warning的错误，并且 fopen 返回一个 false；如果文件不存在，才会去创建】x+ : 创建并以读写的方式打开b : 打开一个二进制文件t : 可以透明的将 \t 转化成 \r、\n</code></pre><h4 id="2）-写入函数"><a href="#2）-写入函数" class="headerlink" title="2） 写入函数"></a>2） 写入函数</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token punctuation">[</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.php.net/manual/zh/function.fwrite.php)</span><span class="token function">fputs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// fwrite() 的别名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3）-读取函数"><a href="#3）-读取函数" class="headerlink" title="3） 读取函数"></a>3） 读取函数</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token punctuation">[</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.php.net/manual/zh/function.fread.php)</span><span class="token function">fgets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取一行</span><span class="token function">fgetc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取一个字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4）-关闭函数"><a href="#4）-关闭函数" class="headerlink" title="4） 关闭函数"></a>4） 关闭函数</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5）-不需要-fopen-打开的函数"><a href="#5）-不需要-fopen-打开的函数" class="headerlink" title="5） 不需要 fopen() 打开的函数"></a>5） 不需要 fopen() 打开的函数</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6）-其他读取函数"><a href="#6）-其他读取函数" class="headerlink" title="6） 其他读取函数"></a>6） 其他读取函数</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将整个一个文件读取到一个数组中</span><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将文件读取出来，并输出到缓冲区</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="7）-访问远程文件"><a href="#7）-访问远程文件" class="headerlink" title="7） 访问远程文件"></a>7） 访问远程文件</h4><pre><code>在 php.ini中 开启 allow_url_fopen，    HTTP协议连接只能使用只读，    FTP协议可以使用只读或者只写。注：只有开启该项，才可以通过 file_get_contents() 或者 file_put_contents() 进行连接或者读取!!!</code></pre><h3 id="2、延伸：目录操作函数、其他文件操作"><a href="#2、延伸：目录操作函数、其他文件操作" class="headerlink" title="2、延伸：目录操作函数、其他文件操作"></a>2、延伸：目录操作函数、其他文件操作</h3><h4 id="1）目录操作函数"><a href="#1）目录操作函数" class="headerlink" title="1）目录操作函数"></a>1）目录操作函数</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 名称相关</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 目录读取</span><span class="token function">opendir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">closedir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rewinddir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 目录删除</span><span class="token comment" spellcheck="true">// 注意事项：目录中一定要为空【在删除的时候，先去遍历一下，把里面的内容清除掉，先删除文件，再去删除目录】</span><span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 目录创建</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2）-其他函数"><a href="#2）-其他函数" class="headerlink" title="2） 其他函数"></a>2） 其他函数</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 文件大小</span><span class="token function">filesize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 目录大小</span><span class="token function">disk_free_space</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 磁盘剩余空间</span><span class="token function">disk_total_space</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 磁盘总空间</span><span class="token comment" spellcheck="true">// 文件拷贝</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除文件</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 文件类型</span><span class="token function">filetype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取到的文件类型 file/dir类型【常见的只有这两种】</span><span class="token comment" spellcheck="true">// 重命名文件或者目录</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不光可以重名名，还可以移动目录的位置【相当与 Linux命令mv】</span><span class="token comment" spellcheck="true">// 文件截取</span><span class="token function">ftruncate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 截取到指定大小</span><span class="token comment" spellcheck="true">// 文件属性</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 判断文件是否存在</span><span class="token function">is_readable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 是否可读</span><span class="token function">is_writable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 是否可写</span><span class="token function">is_executable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 是否可执行</span><span class="token function">filectime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// inode修改时间</span><span class="token function">fileatime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 访问时间</span><span class="token function">filemtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 整个修改时间</span><span class="token comment" spellcheck="true">// 文件锁</span><span class="token function">flock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 文件指针</span><span class="token function">ftell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 返回文件指针读/写的位置</span><span class="token function">fseek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 在文件指针中定位</span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 倒回文件指针的位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、解题方法"><a href="#二、解题方法" class="headerlink" title="二、解题方法"></a>二、解题方法</h2><blockquote><p>1、牢记文件操作函数及几种打开模式<br>2、理解目录的操作步骤<br>3、尝试练习完成目录的复制和删除函数的编写</p></blockquote><p><strong>注：在做目录删除的时候，一定要将 . 和 .. 过滤掉，否则会递归的向上删除掉所有的目录！！！</strong></p><h2 id="三、真题"><a href="#三、真题" class="headerlink" title="三、真题"></a>三、真题</h2><h3 id="1、不断在文件-hello-txt-头部写入一行-“Hello-World”-字符串，要求代码完整。"><a href="#1、不断在文件-hello-txt-头部写入一行-“Hello-World”-字符串，要求代码完整。" class="headerlink" title="1、不断在文件 hello.txt 头部写入一行 “Hello World” 字符串，要求代码完整。"></a>1、不断在文件 hello.txt 头部写入一行 “Hello World” 字符串，要求代码完整。</h3><h4 id="1）创建一个-hello-txt-文件，并写入如下内容："><a href="#1）创建一个-hello-txt-文件，并写入如下内容：" class="headerlink" title="1）创建一个 hello.txt 文件，并写入如下内容："></a>1）创建一个 hello.txt 文件，并写入如下内容：</h4><pre><code>This is My Test Content!!!</code></pre><h4 id="2）-创建一个-test-php-文件，并写入如下内容："><a href="#2）-创建一个-test-php-文件，并写入如下内容：" class="headerlink" title="2） 创建一个 test.php 文件，并写入如下内容："></a>2） 创建一个 test.php 文件，并写入如下内容：</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 打开文件</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">'./hello.txt'</span><span class="token punctuation">;</span><span class="token variable">$handle</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用 r+ 会把后面的内容覆盖掉</span><span class="token comment" spellcheck="true">// 将文件的内容读取出来，在开头加入 Hello World</span><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">,</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string">'Hello World'</span> <span class="token punctuation">.</span> <span class="token variable">$content</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将拼接好的字符串写回到文件当中</span><span class="token variable">$handle</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3）运行结果："><a href="#3）运行结果：" class="headerlink" title="3）运行结果："></a>3）运行结果：</h4><pre><code>Hello WorldThis is My Test Content!!!</code></pre><h3 id="2、通过PHP函数的方式对目录进行遍历，写出程序。"><a href="#2、通过PHP函数的方式对目录进行遍历，写出程序。" class="headerlink" title="2、通过PHP函数的方式对目录进行遍历，写出程序。"></a>2、通过PHP函数的方式对目录进行遍历，写出程序。</h3><h4 id="1）-创建目录-test-及在其目录下创建1、2、3文件；"><a href="#1）-创建目录-test-及在其目录下创建1、2、3文件；" class="headerlink" title="1） 创建目录 test,及在其目录下创建1、2、3文件；"></a>1） 创建目录 test,及在其目录下创建1、2、3文件；</h4><h4 id="2）-在-test目录的同级新建一个文件夹-example-php用来遍历目录，如下："><a href="#2）-在-test目录的同级新建一个文件夹-example-php用来遍历目录，如下：" class="headerlink" title="2） 在 test目录的同级新建一个文件夹 example.php用来遍历目录，如下："></a>2） 在 test目录的同级新建一个文件夹 example.php用来遍历目录，如下：</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 打开目录</span><span class="token comment" spellcheck="true">// 读取目录当中的文件</span><span class="token comment" spellcheck="true">// 如果文件类型是目录，继续打开目录</span><span class="token comment" spellcheck="true">// 读取子目录的文件</span><span class="token comment" spellcheck="true">// 如果文件类型是文件，输出目录</span><span class="token comment" spellcheck="true">// 关闭目录</span><span class="token keyword">function</span> <span class="token function">loopDir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$handle</span> <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当目录中的文件都读取完时，才跳出循环【为了避免为0时，跳出循环】</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">!==</span> <span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">readdir</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">!=</span> <span class="token string">'.'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file</span> <span class="token operator">!=</span> <span class="token string">'..'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token variable">$file</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">filetype</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'dir'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">loopDir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 遍历的目录名称</span><span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token string">'./test'</span><span class="token punctuation">;</span><span class="token function">loopDir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP面试 </tag>
            
            <tag> PHP基础 </tag>
            
            <tag> 文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PHP面试题】正则表达式及手机号码的正则表达式。</title>
      <link href="/2020/07/06/regexp/"/>
      <url>/2020/07/06/regexp/</url>
      
        <content type="html"><![CDATA[<h2 id="一、考点："><a href="#一、考点：" class="headerlink" title="一、考点："></a>一、考点：</h2><h3 id="1-手机号码的正则表达式编写"><a href="#1-手机号码的正则表达式编写" class="headerlink" title="1. 手机号码的正则表达式编写"></a>1. 手机号码的正则表达式编写</h3><h3 id="2-延伸：正则表达式组成及编写方法"><a href="#2-延伸：正则表达式组成及编写方法" class="headerlink" title="2. 延伸：正则表达式组成及编写方法"></a>2. 延伸：正则表达式组成及编写方法</h3><h4 id="1）-正则表达式的作用：分割、查找、匹配、替换字符串"><a href="#1）-正则表达式的作用：分割、查找、匹配、替换字符串" class="headerlink" title="1） 正则表达式的作用：分割、查找、匹配、替换字符串"></a>1） 正则表达式的作用：分割、查找、匹配、替换字符串</h4><h4 id="2）正则表达式的组成部分："><a href="#2）正则表达式的组成部分：" class="headerlink" title="2）正则表达式的组成部分："></a>2）正则表达式的组成部分：</h4><p>① 分隔符：</p><pre><code>1) 正斜线（/）【推荐使用】；2) hash符号（#）；3) 取反符号（~）；</code></pre><p>② 通用原子：</p><pre><code>1) \d: 0-92) \D: 除了0-93) \w: 数字、字母、下划线4) \W: 除了数字、字母、下划线5) \s: 空白符6) \S: 除了空白符</code></pre><p>③ 元字符：</p><pre><code>1) . : 除了 换行符 之外的任意符2) * : 出现0次、1次或者多次3）? : 出现0或1次4) ^ : 必须以其开头5) $ : 必须以其结尾6) + : 出现1次或多次7) {n} : 恰巧出现n次8) {n,} : &gt;= n次9) {n, m} : n &lt;= 出现次数 &lt;= m10) [] : 集合【如：[abc] 表示匹配 a或b或c】11) ()：互相引用，即匹配一个整体【如：(abc) 表示同时匹配abc】12) [^] : 取反【如：[^abc] 表示除了a/b/c】13) | : 或者14) [-] : 匹配一个范围【如：[0-9] 表示匹配0-9】</code></pre><p>④ 模式修正符：</p><pre><code>1) i : 不区分大小写2) m : 将字符串通过分隔符进行分割【即将字符串中的每一行分别进行匹配】3) e : 在进行 preg_replace时，可以将匹配的内容进行PHP语法的处理【PHP7.0起废除】4) s : 修正圆点元字符(.)和换行5) U : 取消贪婪模式6) x : 忽略模式中的空白符7) A : 必须以该模式开头8) D : 修正 $对\n的忽略9) u : 当进行uft-8中文匹配的使用，可以使用</code></pre><h4 id="3）-后向引用：将前面匹配到的放到后面"><a href="#3）-后向引用：将前面匹配到的放到后面" class="headerlink" title="3） 后向引用：将前面匹配到的放到后面"></a>3） 后向引用：将前面匹配到的放到后面</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">'&amp;#60b&amp;#62abc&amp;#60/b&amp;#62'</span><span class="token punctuation">;</span><span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/&amp;#60b&amp;#62(.*)&amp;#60\/b&amp;#62/'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正则表达式</span><span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token string">'\\1'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 两个反斜线是为了防止将 \1 转义掉；</span> <span class="token comment" spellcheck="true">// \1表示匹配第一个括号中的内容；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4）-贪婪模式"><a href="#4）-贪婪模式" class="headerlink" title="4） 贪婪模式"></a>4） 贪婪模式</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">'&amp;#60b&amp;#62abc&amp;#60/b&amp;#62&amp;#60b&amp;#62bcd&amp;#60/b&amp;#62'</span><span class="token punctuation">;</span> <span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/&amp;#60b&amp;#62(.*)&amp;#60\/b&amp;#62/'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 贪婪模式</span><span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token string">'\\1'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// abc&amp;#60/b&amp;#62&amp;#60b&amp;#62bcd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>取消 贪婪模式 的方法：<br>① 使用 . * ? 取消贪婪模式</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">'&amp;#60b&amp;#62abc&amp;#60/b&amp;#62&amp;#60b&amp;#62bcd&amp;#60/b&amp;#62'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 匹配每一个&amp;#60b&amp;#62标签中的内容</span><span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/&amp;#60b&amp;#62(.*?)&amp;#60\/b&amp;#62/'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 匹配到了abc和bcd（从[b]开始，匹配到了abc，遇到[/b]结束；再次遇到[b]开始，匹配到了bcd，遇到[/b]结束）</span><span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token string">'\\1'</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// abc</span><span class="token comment" spellcheck="true">// bcd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>② 使用 . * 后面加 U 取消贪婪模式</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">'&amp;#60b&amp;#62abc&amp;#60/b&amp;#62&amp;#60b&amp;#62bcd&amp;#60/b&amp;#62'</span><span class="token punctuation">;</span><span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/&amp;#60b&amp;#62(.*)&amp;#60\/b&amp;#62/U'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token string">'\\1'</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// abc</span><span class="token comment" spellcheck="true">// bcd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两种方法不能同时使用</p><h4 id="5）-正在表达式PCRE函数"><a href="#5）-正在表达式PCRE函数" class="headerlink" title="5） 正在表达式PCRE函数"></a>5） 正在表达式PCRE函数</h4><table><tbody><tr><th>函数</th><th>描述</th></tr><tr><td><a href="https://www.runoob.com/php/php-preg_filter.html" target="_blank">preg_filter</a> </td><td> 执行一个正则表达式搜索和替换</td></tr><tr><td><a href="https://www.runoob.com/php/php-preg_grep.html" target="_blank">preg_grep</a> </td><td> 返回匹配模式的数组条目</td></tr><tr><td><a href="https://www.runoob.com/php/php-preg_last_error.html" target="_blank">preg_last_error</a> </td><td> 返回最后一个PCRE正则执行产生的错误代码</td></tr><tr><td><a href="https://www.runoob.com/php/php-preg_match_all.html" target="_blank">preg_match_all</a> </td><td> 执行一个全局正则表达式匹配</td></tr><tr><td><a href="https://www.runoob.com/php/php-preg_match.html" target="_blank">preg_match</a> </td><td> 执行一个正则表达式匹配</td></tr><tr><td><a href="https://www.runoob.com/php/php-preg_quote.html" target="_blank">preg_quote</a> </td><td> 转义正则表达式字符</td></tr><tr><td><a href="https://www.runoob.com/php/php-preg_replace_callback_array.html" target="_blank">preg_replace_callback_array</a> </td><td> 执行一个正则表达式搜索并且使用一个回调进行替换</td></tr><tr><td><a href="https://www.runoob.com/php/php-preg_replace_callback.html" target="_blank">preg_replace_callback</a> </td><td> 执行一个正则表达式搜索并且使用一个回调进行替换</td></tr><tr><td><a href="https://www.runoob.com/php/php-preg_replace.html" target="_blank">preg_replace</a> </td><td> 执行一个正则表达式的搜索和替换</td></tr><tr><td><a href="https://www.runoob.com/php/php-preg_split.html" target="_blank">preg_split</a> </td><td> 通过一个正则表达式分隔字符串</td></tr></tbody></table><h4 id="6）-中文匹配"><a href="#6）-中文匹配" class="headerlink" title="6） 中文匹配"></a>6） 中文匹配</h4><p>① UTF-8汉字编码范围是：0x4e00-0x9fa5； UTF-8要使用 u模式修正符 使模式字符串被当成 UTF-8。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 该中文为UTF-8下的中文</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">'中文'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// UTF-8进行匹配</span><span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/[\x{4e00}-\x{9fa5}]+/u'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 匹配一次或多次，不区分大小写</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* array(1) {  [0]=>  string(6) "中文"}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>② 在ANSI(gb2312)环境下， 0xb0-0xf7, 0xa1-0xfe；在ANSI(gb2312)环境下，要使用chr将ASCII码转换为字符</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">'中文'</span><span class="token punctuation">;</span><span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/['</span><span class="token punctuation">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0xf7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">']['</span><span class="token punctuation">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0xfe</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">']/'</span><span class="token punctuation">;</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、解题方法"><a href="#二、解题方法" class="headerlink" title="二、解题方法"></a>二、解题方法</h2><blockquote><p>1） 先写出一个要匹配的字符串；<br>2） 自左向右的顺序使用正则表达式的原子核元字符进行拼接；<br>3） 最终加入模式修正符；<br>4） 不可死记硬背模式；<br>5） 练习常见正则表达式（URL、Email、IP地址、手机号码等）。</p></blockquote><h2 id="三、真题"><a href="#三、真题" class="headerlink" title="三、真题"></a>三、真题</h2><h3 id="1-至少写出一种验证-139手机号码的正则表达式。"><a href="#1-至少写出一种验证-139手机号码的正则表达式。" class="headerlink" title="1. 至少写出一种验证 139手机号码的正则表达式。"></a>1. 至少写出一种验证 139手机号码的正则表达式。</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">'13988888888'</span><span class="token punctuation">;</span><span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/^139\d{8}$/'</span><span class="token punctuation">;</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*array(1) {  [0]=>  string(11) "13988888888"}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-请写出一个正则表达式，取出页面中所有-img标签-中的-src值。"><a href="#2-请写出一个正则表达式，取出页面中所有-img标签-中的-src值。" class="headerlink" title="2. 请写出一个正则表达式，取出页面中所有 img标签 中的 src值。"></a>2. 请写出一个正则表达式，取出页面中所有 img标签 中的 src值。</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">'&amp;#60img alt="狗狗" id="dog" src="dog.jpg" /&amp;#62'</span><span class="token punctuation">;</span><span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/&amp;#60img.*?src="(.*?)".*?\/?&amp;#62/i'</span><span class="token punctuation">;</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*array(2) {  [0]=>  string(43) "&amp;#60img alt="狗狗" id="dog" src="dog.jpg" /&amp;#62"  [1]=>  string(7) "dog.jpg"}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> PHP面试 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 自定义函数及内部函数考察点</title>
      <link href="/2020/07/06/variables-scope/"/>
      <url>/2020/07/06/variables-scope/</url>
      
        <content type="html"><![CDATA[<h2 id="一、变量的作用域"><a href="#一、变量的作用域" class="headerlink" title="一、变量的作用域"></a>一、变量的作用域</h2><blockquote><p>变量的作用域也称变量的范围，变量的范围即它定义的上下文背景（也是它的生效范围）。大部分的PHP变量只有一个单独的范围。这个单独的范围跨度同样包含了 include 和 require 引入的文件。</p></blockquote><p>任何用于函数内部的变量按缺省情况将被限制在局部函数范围内。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* global scope 全局 */</span><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* reference to local scope variable 局部 */</span><span class="token punctuation">}</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Notice: Undefined variable: a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-global关键字："><a href="#1-global关键字：" class="headerlink" title="1. global关键字："></a>1. global关键字：</h3><p>PHP 中全局变量在函数中使用时必须声明为 global。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// global关键字</span><span class="token variable">$outer</span> <span class="token operator">=</span> <span class="token string">'str'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全局变量</span><span class="token keyword">function</span> <span class="token function">mgfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$outer</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以把外部的变量拿到内部来使用</span>    <span class="token keyword">echo</span> <span class="token variable">$outer</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 局部变量</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 里面的 $outer 和 外面的 $outer不是一个变量</span><span class="token function">mgfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// str</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-GLOBALS-及-其他超全局数组："><a href="#2-GLOBALS-及-其他超全局数组：" class="headerlink" title="2. $GLOBALS 及 其他超全局数组："></a>2. $GLOBALS 及 其他超全局数组：</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// $GLOBALS</span><span class="token variable">$outer</span> <span class="token operator">=</span> <span class="token string">'str'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">mgfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">'outer'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token function">mgfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// str</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、静态变量"><a href="#二、静态变量" class="headerlink" title="二、静态变量"></a>二、静态变量</h2><blockquote><p>静态变量：仅在局部函数域中存在，但当程序执行离开此作用域时，其值并不会消失。</p></blockquote><h3 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h3><ol><li>仅初始化一次；</li><li>初始化时需要赋值；</li><li>每次执行函数该值会保留；</li><li>static 修饰的变量是局部的【仅在函数内部有效】；</li><li>可以记录函数的调用次数，从而可以在某些条件下终止递归。</li></ol><p>代码实现：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">mgFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、真题"><a href="#三、真题" class="headerlink" title="三、真题"></a>三、真题</h2><p>写出如下程序的输出结果：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$count</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">function</span>  <span class="token function">get_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token variable">$count</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// static 修饰的变量是局部的【仅在函数内部有效】；</span>    <span class="token keyword">return</span> <span class="token variable">$count</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token variable">$count</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span><span class="token operator">++</span><span class="token variable">$count</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span><span class="token keyword">echo</span> <span class="token function">get_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// null</span><span class="token keyword">echo</span> <span class="token function">get_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// null++ = 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、延伸考点"><a href="#四、延伸考点" class="headerlink" title="四、延伸考点"></a>四、延伸考点</h2><h3 id="1）-函数的参数及参数的引用传递"><a href="#1）-函数的参数及参数的引用传递" class="headerlink" title="1） 函数的参数及参数的引用传递"></a>1） 函数的参数及参数的引用传递</h3><p>默认情况下，函数参数通过值传递。如果希望允许函数修改它的值，必须通过引用传递参数(<code>&amp;</code>)</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">myFun</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">myFun</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只能传递变量</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2）函数的返回值"><a href="#2）函数的返回值" class="headerlink" title="2）函数的返回值"></a>2）函数的返回值</h3><ul><li>值通过使用可选的返回语句( return )返回</li><li>可以返回包括数组和对象的任意类型</li><li>返回语句会终止函数执行，将控制权交回函数调用处</li><li>省略return,返回值为NULL，不可有多个返回值(如果想返回多个值，可以返回一个数组)</li></ul><h3 id="3）函数的引用返回"><a href="#3）函数的引用返回" class="headerlink" title="3）函数的引用返回"></a>3）函数的引用返回</h3><p>从函数返回一个引用，必须在函数声明和指派返回值给一个变量时都使用引用运算符 &amp;</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token operator">&amp;</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//$a 指向了 $b</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//$b 也变成了 100</span><span class="token keyword">echo</span> <span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4）外部文件的导入"><a href="#4）外部文件的导入" class="headerlink" title="4）外部文件的导入"></a>4）外部文件的导入</h3><ul><li>include/require语句包含并运行指定文件</li><li>如果给出路径名则按照路径来找，否则从include_path中查找</li><li>如果include_path中也没有，则从调用脚本文件所在的目录和当前工作目录下寻找</li><li>当一个文件被包含时，其中所包含的代码继承了include所在行的变量范围。</li><li>加载过程中未找到文件则include 结构会发出一条警告(E_WARNING)，脚本会继续运行；这一点和require不同，require会发出一个致命错误(E_COMPILE_ERROR)导致脚本中止</li><li>require(include)/require_one(inclue_once) 唯一区别是 PHP 会检查该文件是否已经被包含过，如果是则不会再次包含。</li></ul><h4 id="5）系统内置函数"><a href="#5）系统内置函数" class="headerlink" title="5）系统内置函数"></a>5）系统内置函数</h4><ol><li><p>时间日期函数</p><ul><li>data()   格式化本地日期和时间，并返回格式化的日期字符串</li><li>strtotimme()  获取指定日期的unix时间戳</li><li>mktime()  返回一个日期的 UNIX 时间戳，然后使用它来查找该日期的天</li><li>time()  返回当前时间的 Unix 时间戳，并格式化为日期</li><li>microtime()   函数返回当前 Unix 时间戳的微秒数</li><li>date_default_timezone_set()  设置默认时区</li></ul></li><li><p>ip处理函数</p><ul><li>ip2long()  将四个字段以点分开的IP网络址协议地址转换成整数</li><li>long2ip()  用于将一个数字格式的IPv4地址转换成字符串格式</li></ul></li><li><p>打印处理函数</p></li></ol><ul><li>echo()： <blockquote><p>可以一次输出多个值，多个值之间用逗号分隔。echo是语言结构(language construct)，而并不是真正的函数，因此不能作为表达式的一部分使用。</p></blockquote></li><li>print()： <blockquote><p>简单类型变量的值(如int,string) 函数print()打印一个值（它的参数），如果字符串成功显示则返回true，否则返回false。</p></blockquote></li><li>print_r()<blockquote><p>可以打印出复杂类型变量的值(如数组,对象) ,可以把字符串和数字简单地打印出来，而数组则以括起来的键和值得列表形式显示，并以Array开头。但print_r()输出布尔值和NULL的结果没有意义，因为都是打印”\n”。因此用var_dump()函数更适合调试。打印关于变量的易于理解的信息,如果给出的是 string、integer 或 float，将打印变量值本身。如果给出的是 array，将会按照一定格式显示键和元素。object 与数组类似。 记住，print_r() 将把数组的指针移到最后边。使用 reset() 可让指针回到开始处。</p></blockquote></li><li>var_dump()<blockquote><p>此函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。<br>判断一个变量的类型与长度,并输出变量的数值,如果变量有值输的是变量的值并回返数据类型。此函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。</p></blockquote></li><li>var_export()<blockquote><p>输出或返回一个变量的字符串表示,此函数返回关于传递给该函数的变量的结构信息</p></blockquote></li></ul><p>您可以通过将函数的第二个参数设置为 TRUE，从而返回变量的表示。是其返回的表示是合法的 PHP 代码。</p><pre><code>var_dump和print_r的区别：var_dump返回表达式的类型与值而print_r仅返回结果，相比调试代码使用var_dump更便于阅读。var_dump和var_export的区别：var_export() 函数返回关于传递给该函数的变量的结构信息，是合法的 PHP 代码，可以通过将函数的第二个参数设置为 TRUE，从而返回变量的表示var_dump() 打印变量的相关信息printf():根据格式进行输出sprintf():根据格式转换字符串，并返回</code></pre><h4 id="6）序列化和反序列化函数"><a href="#6）序列化和反序列化函数" class="headerlink" title="6）序列化和反序列化函数"></a>6）序列化和反序列化函数</h4><ul><li><a href="https://www.php.net/manual/zh/function.serialize.php" target="_blank" rel="noopener">serialize</a> ( mixed $value ) : string  产生一个可存储的值的表示</li></ul><p>返回字符串，此字符串包含了表示 value 的字节流，可以存储于任何地方。 </p><ul><li><a href="https://www.php.net/manual/zh/function.unserialize.php" target="_blank" rel="noopener">unserialize</a> ( string $str ) : mixed  从已存储的表示中创建 PHP 的值</li></ul><p>对单一的已序列化的变量进行操作，将其转换回 PHP 的值。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'Apple'</span> <span class="token punctuation">,</span><span class="token string">'b'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'banana'</span> <span class="token punctuation">,</span> <span class="token string">'c'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'Coconut'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//序列化数组   </span><span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token variable">$s</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出结果：a:3:{s:1:"a";s:5:"Apple";s:1:"b";s:6:"banana";s:1:"c";s:7:"Coconut";}   </span><span class="token keyword">echo</span> <span class="token string">'&lt;br />&lt;br />'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//反序列化  </span><span class="token variable">$o</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出结果 Array ( [a] => Apple [b] => banana [c] => Coconut ) </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>json_encode 和 json_decode</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'Apple'</span> <span class="token punctuation">,</span><span class="token string">'b'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'banana'</span> <span class="token punctuation">,</span> <span class="token string">'c'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'Coconut'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//序列化数组</span><span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$s</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果：{"a":"Apple","b":"banana","c":"Coconut"}</span><span class="token keyword">echo</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反序列化</span><span class="token variable">$o</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果 Array ( [a] => Apple [b] => banana [c] => Coconut ) </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7）字符串处理函数"><a href="#7）字符串处理函数" class="headerlink" title="7）字符串处理函数"></a>7）字符串处理函数</h4><ul><li>implode（） 把数组元素组合为一个字符串</li><li>explode（） 把字符串打散为数组</li><li>join（） 把数组元素组合为一个字符串</li><li>strrev（） 反转字符串</li><li>trim（）移除字符串两侧的字符</li><li>ltrim（）移除字符串左侧的字符</li><li>rtrim（）移除字符串右侧的字符</li><li>strstr（）函数搜索字符串在另一字符串中是否存在，如果是，返回该字符串及剩余部分，否则返回 FALSE</li><li>number_format（）通过千位分组来格式化数字</li></ul><h4 id="8）数组处理函数"><a href="#8）数组处理函数" class="headerlink" title="8）数组处理函数"></a>8）数组处理函数</h4><ul><li>array_keys（）返回包含数组中所有键名的一个新数组</li><li>array_value（）返回数组中所有的值（不保留键名）</li><li>array_diff（）比较两个数组的键值，并返回差集</li><li>array_intersect（）比较两个数组的键值，并返回交集</li><li>array_merge（） 把两个数组合并为一个数组</li><li>array_shift（）删除数组中的第一个元素，并返回被删除元素的值</li><li>array_unshift（）函数用于向数组插入新元素。新数组的值将被插入到数组的开头</li><li>array_pop（）函数删除数组中的最后一个元素</li><li>aray_push（）函数向数组尾部插入一个或多个元素</li><li>sort（） 函数对索引数组进行升序排序</li><li>rsort() 函数对索引数组进行降序排序</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP面试 </tag>
            
            <tag> PHP基础 </tag>
            
            <tag> 变量作用域 </tag>
            
            <tag> 静态变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PHP面试题】请列出3种PHP数组循环操作的语法，并注明各种循环的区别。</title>
      <link href="/2020/07/05/control-structures/"/>
      <url>/2020/07/05/control-structures/</url>
      
        <content type="html"><![CDATA[<h2 id="一-流程控制考点"><a href="#一-流程控制考点" class="headerlink" title="一. 流程控制考点"></a>一. 流程控制考点</h2><h3 id="1-PHP的遍历数组的三种方式及各自区别"><a href="#1-PHP的遍历数组的三种方式及各自区别" class="headerlink" title="1. PHP的遍历数组的三种方式及各自区别"></a>1. PHP的遍历数组的三种方式及各自区别</h3><h4 id="1）-遍历数组的方式"><a href="#1）-遍历数组的方式" class="headerlink" title="1） 遍历数组的方式"></a>1） 遍历数组的方式</h4><ul><li>使用 for循环；</li><li>使用 foreach循环；</li><li>使用 while、list()、each()组合循环；</li></ul><h4 id="2）-区别"><a href="#2）-区别" class="headerlink" title="2） 区别"></a>2） 区别</h4><ul><li>for循环：只能遍历索引数组；</li><li>foreach循环：可以遍历索引和关联数组；</li><li>联合使用list()、each() 和 while循环：可以遍历索引和关联数组；</li><li>while、list()、each()组合不会 reset()操作【即不会将数组的指针重置】；</li><li>foreach遍历会对数组进行reset()操作。</li></ul><h3 id="2-延伸：分支结构"><a href="#2-延伸：分支结构" class="headerlink" title="2. 延伸：分支结构"></a>2. 延伸：分支结构</h3><h4 id="1）-if-…elseif："><a href="#1）-if-…elseif：" class="headerlink" title="1） if …elseif："></a>1） if …elseif：</h4><ul><li>在 elseif 语句中 只能有一个表达式为 true，即 在 elseif 语句中 只能有一个语句块被执行，多个 elseif从句是排斥关系；</li><li>使用 elseif 语句 有一个基本原则： 总是把优先范围小的条件放在前面处理。【即把可能性大的放到前面】</li></ul><h4 id="2）-switch…case…："><a href="#2）-switch…case…：" class="headerlink" title="2） switch…case…："></a>2） switch…case…：</h4><ul><li>和 if 不同的是，switch 后面的控制表达式的数据类型只能是整型、浮点型或者字符串；</li><li>continue 语句 作用到 switch 的作用类似于 break ；</li><li>跳出 switch 外的循环( for(){switch(){ case …: … continue2; }})，可以使用 continue2；</li><li>底层原理：switch … case 会生成跳转表，直接跳转到对应 case (不会一层一层去判断)；</li><li>效率：如果条件比一个简单的比较要复杂得多，或者在一个很多次的循环中，那么用 switch 语句可能会快一些</li></ul><p>代码执行：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等价于 continue;【如果需要其作用于 for循环，此处应为 continue2（跳出两层循环）】</span>        <span class="token keyword">case</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-解题方法"><a href="#二-解题方法" class="headerlink" title="二. 解题方法"></a>二. 解题方法</h2><blockquote><p>注：理解循环内部机制，更易于记忆 <strong>foreach的reset</strong> 特性，分支结构中理解了 <strong>switch…case</strong> 的执行步骤也就不难理解为什么效率高了。</p></blockquote><h2 id="三-真题："><a href="#三-真题：" class="headerlink" title="三. 真题："></a>三. 真题：</h2><h3 id="PHP中如何优化多个-if…else-语句的情况？"><a href="#PHP中如何优化多个-if…else-语句的情况？" class="headerlink" title="PHP中如何优化多个 if…else 语句的情况？"></a>PHP中如何优化多个 if…else 语句的情况？</h3><ul><li>表达式的可能性越大，越往前放；</li><li>如果判断的是一个比较复杂的结构，且判断的结构是整型、浮点型或字符串类型，则可以使用 switch…case 来进行替换，此时效率会提升。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP面试 </tag>
            
            <tag> PHP基础 </tag>
            
            <tag> 流程控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PHP 运算符】foo()和 @foo()之间的区别</title>
      <link href="/2020/07/05/operator/"/>
      <url>/2020/07/05/operator/</url>
      
        <content type="html"><![CDATA[<h2 id="一-运算符考点"><a href="#一-运算符考点" class="headerlink" title="一. 运算符考点"></a>一. 运算符考点</h2><h3 id="1-PHP的运算符的错误控制符-的使用及其作用"><a href="#1-PHP的运算符的错误控制符-的使用及其作用" class="headerlink" title="1. PHP的运算符的错误控制符@的使用及其作用"></a>1. PHP的运算符的错误控制符@的使用及其作用</h3><blockquote><p>PHP支持一个错误控制符：@。当将其放置在一个PHP表达式之前，该表达式可能产生的任何错误信息都被忽略掉。</p></blockquote><h3 id="2-延伸：PHP所有运算符考点"><a href="#2-延伸：PHP所有运算符考点" class="headerlink" title="2. 延伸：PHP所有运算符考点"></a>2. 延伸：PHP所有运算符考点</h3><h4 id="1）-PHP运算符优先级（从高到低）"><a href="#1）-PHP运算符优先级（从高到低）" class="headerlink" title="1） PHP运算符优先级（从高到低）"></a>1） PHP运算符优先级（从高到低）</h4><ul><li>递增 / 递减</li><li>!</li><li>算术运算符(+-*/)</li><li>大小比较</li><li>（不）相等比较</li><li>引用</li><li>位运算符(^)</li><li>位运算符(|)</li><li>逻辑与(&amp;&amp;)</li><li>逻辑或(||)</li><li>三目(?:)</li><li>赋值($a = false)</li><li>and</li><li>xor</li><li>or</li></ul><p><strong>注：括号的使用可以增加代码可读性，推荐使用</strong></p><h4 id="2）-比较运算符：-和-的区别"><a href="#2）-比较运算符：-和-的区别" class="headerlink" title="2） 比较运算符：== 和 ===的区别"></a>2） 比较运算符：== 和 ===的区别</h4><ul><li>== 比较值是否相等； === 比较值是否相等，类型是否相同。</li><li>等值判断（FALSE的七种情况）</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// bool(true)</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// bool(true)</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token number">0.0</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// bool(true)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>FALSE的七种情况都满足:</p><ul><li>整型 0</li><li>浮点型 0.0</li><li>零字符串 ‘0’</li><li>空字符串 ‘’ “</li><li>空数组 array()</li><li>null</li><li>布尔型 false</li></ul><h4 id="3）-递增-递减运算符"><a href="#3）-递增-递减运算符" class="headerlink" title="3） 递增/递减运算符"></a>3） 递增/递减运算符</h4><ul><li>递增/递减运算符不影响布尔值；<ul><li>true++; // true</li><li>true–; // true</li><li>false++ ; // false</li><li>false–; // false</li></ul></li><li>递减NULL值没有效果；递增NULL值为1；<ul><li>NULL–; // NULL</li><li>NULL++; // 1</li></ul></li><li>递增和递减在前，就先运算，后返回；反之就先返回，后运算</li></ul><h4 id="4）-逻辑运算符"><a href="#4）-逻辑运算符" class="headerlink" title="4） 逻辑运算符"></a>4） 逻辑运算符</h4><ol><li>短路作用</li></ol><pre class="line-numbers language-php"><code class="language-php"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">||</span> <span class="token variable">$b</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// bool(true) 前面是 true，后面不会执行【|| : 一真为真】</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// bool(false) 前面是 false，后面不会执行【&amp;&amp;：一假为假】</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><code>||</code> 和 <code>&amp;&amp;</code> 与 <code>or</code> 和 <code>and</code> 的优先级不同</li></ol><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 先执行 false || true，得到 true,再赋值给 $a</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// bool(true)</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token keyword">or</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 先执行 $b = false，整体为 true，则 $b的值为 false</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// bool(false)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-解题方法"><a href="#二-解题方法" class="headerlink" title="二. 解题方法"></a>二. 解题方法</h2><blockquote><p>重点记忆：<strong>递增/递减</strong>运算符的<strong>运算规则</strong>，逻辑运算符的 <strong>短路效果</strong>，在看到逻辑运算符要多考虑 <strong>优先级</strong> 问题。</p></blockquote><h2 id="三-真题"><a href="#三-真题" class="headerlink" title="三. 真题"></a>三. 真题</h2><p><strong>下列程序中，请写出打印输出的结果：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// bool(true)</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// int(0)</span>    <span class="token variable">$a</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token variable">$b</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// bool(true)</span>    <span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// int(1)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong></p><pre><code>1）优先级问题：(从大到小)    &gt;    ||    =2）执行顺序    3 &gt; 0;                     // true    (3&gt;0) || $b = 3 &gt; 0；    // true ($b = 3 &gt; 0 不执行)    $a = true;    $b = 0;3） 递增运算    $a++; // $a = true; true++; =&gt; true  =&gt; 1    $b++; // $b = 0; 0++; =&gt; 1</code></pre><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// bool(true)</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// int(0)</span>    <span class="token variable">$a</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token variable">$b</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// bool(true)</span>    <span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// int(1)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运算结果：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP面试 </tag>
            
            <tag> PHP基础 </tag>
            
            <tag> 运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 常量及数据类型</title>
      <link href="/2020/07/05/php-data-types/"/>
      <url>/2020/07/05/php-data-types/</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>三大数据类型（标量，复合，特殊）</p><ul><li>标量：<ul><li>字符串</li><li>整型</li><li>浮点型</li><li>布尔型</li><li>NULL</li></ul></li><li>复合：<ul><li>数组</li><li>对象</li></ul></li><li>特殊：<ul><li>资源</li></ul></li></ul><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><p>不能用于精确的相等的判断</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">0.7</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">+</span><span class="token variable">$b</span> <span class="token operator">==</span> <span class="token number">0.8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// fasle, 值为0.7999999</span>    <span class="token keyword">echo</span> <span class="token string">"yes"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">'no'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 答案为 no</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// false 的7种情况</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 超全局数据</span><span class="token variable">$GLOBALS</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">,</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">,</span> <span class="token variable">$_SESSION</span><span class="token punctuation">,</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">,</span> <span class="token variable">$_FILES</span><span class="token punctuation">,</span> <span class="token variable">$_ENV</span><span class="token comment" spellcheck="true">// 注意点：$GLOBALS 包含了后面的所有，$_REQUEST包含了$_GET, $_POST和$_COOKIE,尽量少用$_REQUEST,安全性低.</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'SERVER_ADDR'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 服务器ip</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'SERVER_NAME'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 服务器名</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REQUEST_TIME'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 请求时间</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'QUERY_STRING'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 路由？后的一串</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_REFERER'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 上级请求页面，页面从那里过来的,如果通过网址直接访问就是空</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_USER_AGENT'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 头信息中的USER_AGENT</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 客户端的IP地址</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REQUEST_URI'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// ／index.php</span><span class="token keyword">echo</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'PATH_INFO'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ...index.php/use/reg?status=1   use/reg</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h3><p>直接赋值为NULL， 未定义的变量，unset的变量</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>定义const和define， const更快是语言结构，define是函数,define不能定义类的常量，const可以。常量一经定义就不能修改和删除</p><h3 id="预定义常量"><a href="#预定义常量" class="headerlink" title="预定义常量"></a>预定义常量</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token constant">__FILE__</span> <span class="token comment" spellcheck="true">// 文件的路径名和文件的名称</span><span class="token constant">__LINE__</span> <span class="token comment" spellcheck="true">// 所在行行号</span><span class="token constant">__DIR__</span> <span class="token comment" spellcheck="true">// 所在目录</span><span class="token constant">__FUNCTION__</span> <span class="token comment" spellcheck="true">//所在的函数体的函数名称</span><span class="token constant">__CLASS__</span> <span class="token comment" spellcheck="true">// 类名</span><span class="token constant">__TRAIT__</span> <span class="token comment" spellcheck="true">// trait名</span><span class="token constant">__METHOD__</span> <span class="token comment" spellcheck="true">// 类名+方法名</span><span class="token constant">__NAMESPACE__</span> <span class="token comment" spellcheck="true">// 命名空间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP面试 </tag>
            
            <tag> PHP基础 </tag>
            
            <tag> 数据类型 </tag>
            
            <tag> 常量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PHP面试题】PHP的字符串的定义方式及各自区别（单引号，双引号，heredoc，newdoc）？</title>
      <link href="/2020/07/05/string-define/"/>
      <url>/2020/07/05/string-define/</url>
      
        <content type="html"><![CDATA[<h2 id="一、定义方式"><a href="#一、定义方式" class="headerlink" title="一、定义方式"></a>一、定义方式</h2><blockquote><p>单引号/ 双引号 / heredoc 和 newdoc；（三种）</p></blockquote><h3 id="1、-单引号"><a href="#1、-单引号" class="headerlink" title="1、 单引号"></a>1、 单引号</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 单引号定义变量</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">'a b c d e f $a g'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时$a会被原样输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2、-双引号"><a href="#2、-双引号" class="headerlink" title="2、 双引号"></a>2、 双引号</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 此处可以把 '{$a}' 换成特殊字符，如 &amp; $a &amp;</span><span class="token comment" spellcheck="true">// 原因：单引号的执行效率更高，且将name放到外面可读性更强。</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">"a b c d e f '{$a}' g h"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a b c d e f $a的值 g h </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注：双引号中包含单引号，单引号中包含变量，该变量是会被解析的，因为最外层是双引号，且里面的单引号会被原样输出.</p></blockquote><p><strong>使用场景</strong>：一般会用于sql语句</p><blockquote><p><strong>不推荐写法：</strong>$sql = “SELECT * FROM user WHERE name = ‘$name’”;<br><strong>推荐写法：</strong> $sql = ‘SELECT * FROM user WHERE name = '‘.$name.’'‘;</p></blockquote><h3 id="3、-heredoc"><a href="#3、-heredoc" class="headerlink" title="3、 heredoc"></a>3、 heredoc</h3><ul><li>开头和结尾的名字保持一致；</li><li>结尾要放到一行的开头（前面不可以有任何字符，包括空格）【适用于超长的内容】；</li><li>功能与双引号一致；</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span> EoT <span class="token punctuation">.</span>  <span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 内容可以为字符串，可以写变量、转义字符等，都可以被解析（功能与双引号一致）</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span>EoT<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、-newdoc"><a href="#4、-newdoc" class="headerlink" title="4、 newdoc"></a>4、 newdoc</h3><ul><li>开头和结尾名字要保持一致，且定界符处用单引号括起来；</li><li>结尾要放到一行的开头（前面不可以有任何字符，包括空格）【适用于超长的内容】；</li><li>功能与单引号一致</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// newdoc</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token string">'EoT'</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span>EoT<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、区别"><a href="#二、区别" class="headerlink" title="二、区别"></a>二、区别</h2><ul><li>单引号：<ul><li>(1) 单引号不能解析变量；</li><li>(2) 单引号不能解析转义字符，只能解析单引号和反斜杠本身；</li><li>(3) 变量和变量、变量和字符串、字符串和字符串之间可以用.连接；</li><li>(4) 单引号的效率更高；</li></ul></li><li>双引号：<ul><li>(1) 双引号可以解析变量，变量可以使用特殊字符和{}包含；</li><li>(2) 双引号可以解析所有转义字符；</li><li>(3) 也可以使用.来连接；</li></ul></li><li>heredoc 和 newdoc:<ul><li>(1) heredoc 功能类似于 双引号；</li><li>(2) newdow 功能类似于 单引号；</li><li>(3) 两者都是用来处理大文本。</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP面试 </tag>
            
            <tag> PHP基础 </tag>
            
            <tag> 数据类型 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PHP面试题】什么是 引用变量？在PHP当中，用什么符号定义引用变量？</title>
      <link href="/2020/07/04/php-reference/"/>
      <url>/2020/07/04/php-reference/</url>
      
        <content type="html"><![CDATA[<h2 id="一-PHP引用变量考察点"><a href="#一-PHP引用变量考察点" class="headerlink" title="一. PHP引用变量考察点"></a>一. PHP引用变量考察点</h2><h3 id="1-PHP的引用变量的概念及定义方式"><a href="#1-PHP的引用变量的概念及定义方式" class="headerlink" title="1. PHP的引用变量的概念及定义方式"></a>1. PHP的引用变量的概念及定义方式</h3><p>概念</p><blockquote><p>在PHP中，引用意味着用不同的名字访问同一个变量内容。</p></blockquote><p>定义方式</p><blockquote><p>使用 &amp; 符号</p></blockquote><h3 id="2-延伸：PHP引用变量的原理"><a href="#2-延伸：PHP引用变量的原理" class="headerlink" title="2. 延伸：PHP引用变量的原理"></a>2. 延伸：PHP引用变量的原理</h3><h4 id="1）赋值"><a href="#1）赋值" class="headerlink" title="1）赋值"></a>1）赋值</h4><blockquote><p>将一个变量的值赋值给另一个变量，其中一个变量的值进行改变，会重新进行拷贝，此时会再开辟一个新的内存空间。</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 1. 定义一个变量</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在内存中开辟一片空间，存储变量a</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">memory_get_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// int(406512)</span><span class="token comment" spellcheck="true">// 2. 定义变量 b，将 a变量的值赋值给 b</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将变量b 指向 变量a开辟的空间中</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">memory_get_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// int(406568)</span><span class="token comment" spellcheck="true">// 3. 对 a进行修改</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">memory_get_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// int(406568)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原理：使用了 COW(Copy On Write)机制 : 对 <code>$a</code>或 <code>$b</code> 其中一个进行改变，内存空间才会发生改变。</strong></p><ul><li>在内存中开辟一片空间存储变量a;</li><li>将变量b 指向 变量a的内存空间中;</li><li>对变量a进行修改（对a进行写操作），此时会再开辟一片内存空间存储a和a和a和b（原来的a和a和a和b被改变）</li></ul><h4 id="2）引用"><a href="#2）引用" class="headerlink" title="2）引用"></a>2）引用</h4><blockquote><p>两个变量无论何时都共用一个内存空间（对其中一个的值进行更改的时候，不会开辟新的内存空间）</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 1. 定义一个变量</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">memory_get_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. 定义变量b， 将a变量的值赋值给b</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">memory_get_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3. 对a进行修改</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">memory_get_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原理：</p><ul><li>定义一个变量<code>$a</code>（开辟一个内存空间存储变量<code>$a</code>）；</li><li>定义变量<code>$b</code>，将<code>$b</code>，将<code>$b</code>，将<code>$a</code>的地址给了<code>$b</code>，此时<code>$b</code>，此时<code>$b</code>，此时<code>$b</code>与<code>$a</code>指向同一个内存空间，且永远指向该内存空间（不会再重新拷贝，改掉的只是该内存空间的值）;</li><li>对a进行修改（不会再开辟内存空间），此时a和a和a和b的值，都是修改后的值；</li></ul><h4 id="3）unset-只会取消引用，不会销毁内存空间"><a href="#3）unset-只会取消引用，不会销毁内存空间" class="headerlink" title="3）unset 只会取消引用，不会销毁内存空间"></a>3）unset 只会取消引用，不会销毁内存空间</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 开辟一个内存空间存储变量a,并赋值为1</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将$a的引用赋值给$b，此时$a和$b指向同一个内存空间（永久指向）</span><span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时取消的是$a和$b的引用，不会取消内存空间</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4）-对象本身就是引用传递，因此，在修改的时候，不会再重新开辟内存空间"><a href="#4）-对象本身就是引用传递，因此，在修改的时候，不会再重新开辟内存空间" class="headerlink" title="4） 对象本身就是引用传递，因此，在修改的时候，不会再重新开辟内存空间"></a>4） 对象本身就是引用传递，因此，在修改的时候，不会再重新开辟内存空间</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">'zhangsan'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$p1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 开辟一个内存空间存储$p1</span><span class="token variable">$p2</span> <span class="token operator">=</span> <span class="token variable">$p1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将$p1和$p2存入同一个内存空间（内存空间会变大）</span><span class="token variable">$p2</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string">'lisi'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// $p1,$p2都为lisi，因为指向的是同一个内存空间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-真题"><a href="#二-真题" class="headerlink" title="二. 真题"></a>二. 真题</h2><h3 id="写出如下程序的输出结果："><a href="#写出如下程序的输出结果：" class="headerlink" title="写出如下程序的输出结果："></a>写出如下程序的输出结果：</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$val</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序运行时，每一次循环结束后变量 <code>$data</code> 的值时什么？请解释</p><p>程序执行完成后，变量 <code>$data</code> 的值时什么？请解释</p><h4 id="1）答案："><a href="#1）答案：" class="headerlink" title="1）答案："></a>1）答案：</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 第一次循环</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 第二次循环</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 第三次循环</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 程序执行完成后，变量 $data的值</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2）解析："><a href="#2）解析：" class="headerlink" title="2）解析："></a>2）解析：</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token number">1</span>）<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$val</span><span class="token punctuation">)</span>    会将<span class="token variable">$data</span>第一个元素的键名赋值给<span class="token variable">$key</span>，将<span class="token variable">$data</span>的第一个元素的值赋值给<span class="token variable">$val</span><span class="token punctuation">(</span>即<span class="token variable">$k</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$v</span><span class="token operator">=</span>a<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token variable">$val</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token variable">$v</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>（即<span class="token variable">$v</span>拿了<span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>的地址）    <span class="token variable">$v</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a（此时<span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>和<span class="token variable">$v</span>都指向 a内存空间）以上步骤即为：<span class="token number">1</span>）第一次循环：    <span class="token variable">$k</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token variable">$v</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token variable">$v</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a，<span class="token variable">$v</span> 和 <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> 都指向 a内存空间<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 结果：$data = ['a','b','c'];</span><span class="token number">2</span>）第二次循环：    <span class="token variable">$k</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token variable">$v</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token variable">$v</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> <span class="token variable">$v</span> 和 <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> 都指向 b内存空间<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 结果：$data = ['b','b','c'];</span><span class="token number">3</span>）第三次循环：        <span class="token variable">$k</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token variable">$v</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span>    <span class="token variable">$v</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> <span class="token variable">$v</span> 和 <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> 都指向 c内存空间<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 结果：$data = ['b','c','c'];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3）代码测试："><a href="#3）代码测试：" class="headerlink" title="3）代码测试："></a>3）代码测试：</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$v</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 第一次循环后, $data 的值</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"a"</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"b"</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"c"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 第二次循环后, $data 的值</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"b"</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"b"</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"c"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 第三次循环后, $data 的值</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"b"</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"c"</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"c"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 程序执行完后, $data 的值</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"b"</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"c"</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"c"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP面试 </tag>
            
            <tag> PHP基础 </tag>
            
            <tag> 引用变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建 Hexo 博客</title>
      <link href="/2020/03/14/bulit-hexo-blog/"/>
      <url>/2020/03/14/bulit-hexo-blog/</url>
      
        <content type="html"><![CDATA[<p>来源<a href="https://zhuanlan.zhihu.com/p/35668237" target="_blank" rel="noopener">知乎</a><br><a href="https://godweiyang.com/2018/04/13/hexo-blog/" target="_blank" rel="noopener">原文</a></p><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>首先下载稳定版<a href="https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi" target="_blank" rel="noopener">Node.js</a>，我这里给的是64位的。</p><p>安装选项全部默认，一路点击<code>Next</code>。</p><p>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p><h2 id="添加国内镜像源"><a href="#添加国内镜像源" class="headerlink" title="添加国内镜像源"></a>添加国内镜像源</h2><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。</p><pre class="line-numbers language-Bash"><code class="language-Bash">npm config set registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><h2 id="注册-Github"><a href="#注册-Github" class="headerlink" title="注册 Github"></a>注册 Github</h2><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>定位到博客文件目录下，输入<code>npm i hexo-cli --location=global</code>安装Hexo。会有几个报错，无视它就行。<br>安装完后输入<code>hexo -v</code>验证是否安装成功。<br>然后就要初始化我们的网站，输入<code>hexo init</code>初始化文件夹，接着输入npm install安装必备的组件。</p><p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器</p><h2 id="连结-GitHub-与本地"><a href="#连结-GitHub-与本地" class="headerlink" title="连结 GitHub 与本地"></a>连结 GitHub 与本地</h2><p>首先右键打开git bash，然后输入下面命令：</p><pre class="line-numbers language-Bash"><code class="language-Bash">git config --global user.name "Alexzzl"git config --global user.email "805119233@qq.com"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用户名和邮箱根据你注册github的信息自行修改。</p><p>然后生成密钥SSH key：</p><pre class="line-numbers language-Bash"><code class="language-Bash">ssh-keygen -t rsa -C "805119233@qq.com"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开<a href="https://github.com/" target="_blank" rel="noopener">Github</a>，在头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，名字随便。</p><p>git bash中输入</p><pre class="line-numbers language-Bash"><code class="language-Bash">cat ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将输出的内容复制到框中，点击确定保存。</p><p>输入<code>ssh -T git@github.com</code>，出现你的用户名，那就成功了。</p><p>打开博客根目录下的_config.yml文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</p><p>修改最后一行的配置：</p><pre class="line-numbers language-Bash"><code class="language-Bash">deploy:  type: git  repository: https://github.com/alexzzl/alexzzl.github.io  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>repository修改为你自己的github项目地址。</p><h2 id="写文章、发布文章"><a href="#写文章、发布文章" class="headerlink" title="写文章、发布文章"></a>写文章、发布文章</h2><p>首先在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。</p><p>然后输入<code>hexo new post "article title"</code>，新建一篇文章。</p><p>然后打开<code>blog\source\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><h2 id="备份博客源文件"><a href="#备份博客源文件" class="headerlink" title="备份博客源文件"></a>备份博客源文件</h2><p>有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。</p><p>首先在github博客仓库下新建一个分支<code>hexo</code>，然后<code>git clone</code>到本地，把<code>.git</code>文件夹拿出来，放在博客根目录下。</p><p>然后<code>git checkout hexo</code>切换到<code>hexo</code>分支，然后<code>git add .</code>，然后<code>git commit -m "xxx"</code>，最后<code>git push origin hexo</code>提交就行了。</p><h2 id="个性化设置（matery主题）"><a href="#个性化设置（matery主题）" class="headerlink" title="个性化设置（matery主题）"></a>个性化设置（matery主题）</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/03/14/hello-world/"/>
      <url>/2018/03/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
